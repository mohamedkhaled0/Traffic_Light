
NTI_MAR_RTOS_Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002126  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00002126  000021ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  0080006e  0080006e  000021c8  2**0
                  ALLOC
  3 .stab         00002004  00000000  00000000  000021c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000129b  00000000  00000000  000041cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005467  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000055a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005717  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007360  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000824b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009158  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000093e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009bb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__vector_10>
      2c:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <main>
      8a:	0c 94 91 10 	jmp	0x2122	; 0x2122 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 86 10 	jmp	0x210c	; 0x210c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <RTOS_VidInit>:
#include"RTOS_Interface.h"

Task_t SysTasks[MAX_TASK]={{NULL}};
/*RTOS Init*/
void RTOS_VidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	u32 Loc_u32TickTime_Ns;
	u32 Loc_u32CTCValue;
	/*Set Timer CallBack*/
	TIMER0_VidCTC_SetCallBack(RTOS_VidScheduler);
     b5a:	80 e8       	ldi	r24, 0x80	; 128
     b5c:	96 e0       	ldi	r25, 0x06	; 6
     b5e:	0e 94 18 08 	call	0x1030	; 0x1030 <TIMER0_VidCTC_SetCallBack>
	/*Calculate and Set System Tick*/
	Loc_u32TickTime_Ns=(RTOS_Prescaler*1000)/RTOS_Fcpu_M;
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	9d e7       	ldi	r25, 0x7D	; 125
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	8d 83       	std	Y+5, r24	; 0x05
     b6c:	9e 83       	std	Y+6, r25	; 0x06
     b6e:	af 83       	std	Y+7, r26	; 0x07
     b70:	b8 87       	std	Y+8, r27	; 0x08
	Loc_u32CTCValue=(SYSTEM_TICK_ms*1000000)/Loc_u32TickTime_Ns;
     b72:	80 e4       	ldi	r24, 0x40	; 64
     b74:	92 e4       	ldi	r25, 0x42	; 66
     b76:	af e0       	ldi	r26, 0x0F	; 15
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	2d 81       	ldd	r18, Y+5	; 0x05
     b7c:	3e 81       	ldd	r19, Y+6	; 0x06
     b7e:	4f 81       	ldd	r20, Y+7	; 0x07
     b80:	58 85       	ldd	r21, Y+8	; 0x08
     b82:	bc 01       	movw	r22, r24
     b84:	cd 01       	movw	r24, r26
     b86:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
     b8a:	da 01       	movw	r26, r20
     b8c:	c9 01       	movw	r24, r18
     b8e:	89 83       	std	Y+1, r24	; 0x01
     b90:	9a 83       	std	Y+2, r25	; 0x02
     b92:	ab 83       	std	Y+3, r26	; 0x03
     b94:	bc 83       	std	Y+4, r27	; 0x04
	/*Check on CTC Value less than 256 To set CTC Register*/
	if(Loc_u32CTCValue<256)
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	9a 81       	ldd	r25, Y+2	; 0x02
     b9a:	ab 81       	ldd	r26, Y+3	; 0x03
     b9c:	bc 81       	ldd	r27, Y+4	; 0x04
     b9e:	8f 3f       	cpi	r24, 0xFF	; 255
     ba0:	91 05       	cpc	r25, r1
     ba2:	a1 05       	cpc	r26, r1
     ba4:	b1 05       	cpc	r27, r1
     ba6:	09 f0       	breq	.+2      	; 0xbaa <RTOS_VidInit+0x64>
     ba8:	18 f4       	brcc	.+6      	; 0xbb0 <RTOS_VidInit+0x6a>
	{
		TIMER0_VidSetCTCValue(Loc_u32CTCValue);
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	0e 94 f8 07 	call	0xff0	; 0xff0 <TIMER0_VidSetCTCValue>
	else
	{
		/*Assignment*/
	}
	/*Timer init*/
	TIMER0_VidInit();
     bb0:	0e 94 b2 07 	call	0xf64	; 0xf64 <TIMER0_VidInit>
	/*GIE*/
	MGIE_VidEnable();
     bb4:	0e 94 84 08 	call	0x1108	; 0x1108 <MGIE_VidEnable>
}
     bb8:	28 96       	adiw	r28, 0x08	; 8
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <RTOS_VidCreateTask>:
/*Create Task */
void RTOS_VidCreateTask(void (*Task)(void) ,u32 Copy_u32Periodicity,  u8 Copy_u8Priority,u32 Copy_u32FirstDelay)
{
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	2b 97       	sbiw	r28, 0x0b	; 11
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	9a 83       	std	Y+2, r25	; 0x02
     be8:	89 83       	std	Y+1, r24	; 0x01
     bea:	4b 83       	std	Y+3, r20	; 0x03
     bec:	5c 83       	std	Y+4, r21	; 0x04
     bee:	6d 83       	std	Y+5, r22	; 0x05
     bf0:	7e 83       	std	Y+6, r23	; 0x06
     bf2:	2f 83       	std	Y+7, r18	; 0x07
     bf4:	e8 86       	std	Y+8, r14	; 0x08
     bf6:	f9 86       	std	Y+9, r15	; 0x09
     bf8:	0a 87       	std	Y+10, r16	; 0x0a
     bfa:	1b 87       	std	Y+11, r17	; 0x0b
	/*Check on Function is deleted or is created from before*/
	if(SysTasks[Copy_u8Priority].Fun==NULL)
     bfc:	8f 81       	ldd	r24, Y+7	; 0x07
     bfe:	48 2f       	mov	r20, r24
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	ca 01       	movw	r24, r20
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	9c 01       	movw	r18, r24
     c0a:	22 0f       	add	r18, r18
     c0c:	33 1f       	adc	r19, r19
     c0e:	22 0f       	add	r18, r18
     c10:	33 1f       	adc	r19, r19
     c12:	82 0f       	add	r24, r18
     c14:	93 1f       	adc	r25, r19
     c16:	84 0f       	add	r24, r20
     c18:	95 1f       	adc	r25, r21
     c1a:	fc 01       	movw	r30, r24
     c1c:	e2 59       	subi	r30, 0x92	; 146
     c1e:	ff 4f       	sbci	r31, 0xFF	; 255
     c20:	80 81       	ld	r24, Z
     c22:	91 81       	ldd	r25, Z+1	; 0x01
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	09 f0       	breq	.+2      	; 0xc2a <RTOS_VidCreateTask+0x60>
     c28:	5e c0       	rjmp	.+188    	; 0xce6 <RTOS_VidCreateTask+0x11c>
	{
		/*Set Task Parameters*/
		SysTasks[Copy_u8Priority].Fun=Task;
     c2a:	8f 81       	ldd	r24, Y+7	; 0x07
     c2c:	48 2f       	mov	r20, r24
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	ca 01       	movw	r24, r20
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	9c 01       	movw	r18, r24
     c38:	22 0f       	add	r18, r18
     c3a:	33 1f       	adc	r19, r19
     c3c:	22 0f       	add	r18, r18
     c3e:	33 1f       	adc	r19, r19
     c40:	82 0f       	add	r24, r18
     c42:	93 1f       	adc	r25, r19
     c44:	84 0f       	add	r24, r20
     c46:	95 1f       	adc	r25, r21
     c48:	fc 01       	movw	r30, r24
     c4a:	e2 59       	subi	r30, 0x92	; 146
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	91 83       	std	Z+1, r25	; 0x01
     c54:	80 83       	st	Z, r24
		SysTasks[Copy_u8Priority].Periodicity=Copy_u32Periodicity;
     c56:	8f 81       	ldd	r24, Y+7	; 0x07
     c58:	48 2f       	mov	r20, r24
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	ca 01       	movw	r24, r20
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	9c 01       	movw	r18, r24
     c64:	22 0f       	add	r18, r18
     c66:	33 1f       	adc	r19, r19
     c68:	22 0f       	add	r18, r18
     c6a:	33 1f       	adc	r19, r19
     c6c:	82 0f       	add	r24, r18
     c6e:	93 1f       	adc	r25, r19
     c70:	84 0f       	add	r24, r20
     c72:	95 1f       	adc	r25, r21
     c74:	fc 01       	movw	r30, r24
     c76:	e0 59       	subi	r30, 0x90	; 144
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	9c 81       	ldd	r25, Y+4	; 0x04
     c7e:	ad 81       	ldd	r26, Y+5	; 0x05
     c80:	be 81       	ldd	r27, Y+6	; 0x06
     c82:	80 83       	st	Z, r24
     c84:	91 83       	std	Z+1, r25	; 0x01
     c86:	a2 83       	std	Z+2, r26	; 0x02
     c88:	b3 83       	std	Z+3, r27	; 0x03
		SysTasks[Copy_u8Priority].TaskState=TASK_RESUME;
     c8a:	8f 81       	ldd	r24, Y+7	; 0x07
     c8c:	48 2f       	mov	r20, r24
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	ca 01       	movw	r24, r20
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	9c 01       	movw	r18, r24
     c98:	22 0f       	add	r18, r18
     c9a:	33 1f       	adc	r19, r19
     c9c:	22 0f       	add	r18, r18
     c9e:	33 1f       	adc	r19, r19
     ca0:	82 0f       	add	r24, r18
     ca2:	93 1f       	adc	r25, r19
     ca4:	84 0f       	add	r24, r20
     ca6:	95 1f       	adc	r25, r21
     ca8:	fc 01       	movw	r30, r24
     caa:	ec 58       	subi	r30, 0x8C	; 140
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	80 83       	st	Z, r24
		SysTasks[Copy_u8Priority].FirstDelay=Copy_u32FirstDelay;
     cb2:	8f 81       	ldd	r24, Y+7	; 0x07
     cb4:	48 2f       	mov	r20, r24
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	ca 01       	movw	r24, r20
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	9c 01       	movw	r18, r24
     cc0:	22 0f       	add	r18, r18
     cc2:	33 1f       	adc	r19, r19
     cc4:	22 0f       	add	r18, r18
     cc6:	33 1f       	adc	r19, r19
     cc8:	82 0f       	add	r24, r18
     cca:	93 1f       	adc	r25, r19
     ccc:	84 0f       	add	r24, r20
     cce:	95 1f       	adc	r25, r21
     cd0:	fc 01       	movw	r30, r24
     cd2:	eb 58       	subi	r30, 0x8B	; 139
     cd4:	ff 4f       	sbci	r31, 0xFF	; 255
     cd6:	88 85       	ldd	r24, Y+8	; 0x08
     cd8:	99 85       	ldd	r25, Y+9	; 0x09
     cda:	aa 85       	ldd	r26, Y+10	; 0x0a
     cdc:	bb 85       	ldd	r27, Y+11	; 0x0b
     cde:	80 83       	st	Z, r24
     ce0:	91 83       	std	Z+1, r25	; 0x01
     ce2:	a2 83       	std	Z+2, r26	; 0x02
     ce4:	b3 83       	std	Z+3, r27	; 0x03
	}
	else
	{
		/*Do Nothing*/
	}
}
     ce6:	2b 96       	adiw	r28, 0x0b	; 11
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	ff 90       	pop	r15
     cfc:	ef 90       	pop	r14
     cfe:	08 95       	ret

00000d00 <RTOS_VidScheduler>:
void RTOS_VidScheduler(void)
{
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	0f 92       	push	r0
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_u8Count;

	/*Loop on all tasks in RTOS system*/
	for(Loc_u8Count=0;Loc_u8Count<MAX_TASK;Loc_u8Count++)
     d12:	19 82       	std	Y+1, r1	; 0x01
     d14:	c2 c0       	rjmp	.+388    	; 0xe9a <RTOS_VidScheduler+0x19a>
	{
		/*check on Task is not deleted and Task State*/
		if((SysTasks[Loc_u8Count].Fun!=NULL)&&(SysTasks[Loc_u8Count].TaskState=TASK_RESUME))
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	48 2f       	mov	r20, r24
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	ca 01       	movw	r24, r20
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	9c 01       	movw	r18, r24
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	22 0f       	add	r18, r18
     d2a:	33 1f       	adc	r19, r19
     d2c:	82 0f       	add	r24, r18
     d2e:	93 1f       	adc	r25, r19
     d30:	84 0f       	add	r24, r20
     d32:	95 1f       	adc	r25, r21
     d34:	fc 01       	movw	r30, r24
     d36:	e2 59       	subi	r30, 0x92	; 146
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	80 81       	ld	r24, Z
     d3c:	91 81       	ldd	r25, Z+1	; 0x01
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	09 f4       	brne	.+2      	; 0xd44 <RTOS_VidScheduler+0x44>
     d42:	a8 c0       	rjmp	.+336    	; 0xe94 <RTOS_VidScheduler+0x194>
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	48 2f       	mov	r20, r24
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	ca 01       	movw	r24, r20
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	9c 01       	movw	r18, r24
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	22 0f       	add	r18, r18
     d58:	33 1f       	adc	r19, r19
     d5a:	82 0f       	add	r24, r18
     d5c:	93 1f       	adc	r25, r19
     d5e:	84 0f       	add	r24, r20
     d60:	95 1f       	adc	r25, r21
     d62:	fc 01       	movw	r30, r24
     d64:	ec 58       	subi	r30, 0x8C	; 140
     d66:	ff 4f       	sbci	r31, 0xFF	; 255
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	80 83       	st	Z, r24
		{
			/*check on Task periodicity*/
			if(SysTasks[Loc_u8Count].FirstDelay==0)
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	48 2f       	mov	r20, r24
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	ca 01       	movw	r24, r20
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	9c 01       	movw	r18, r24
     d7a:	22 0f       	add	r18, r18
     d7c:	33 1f       	adc	r19, r19
     d7e:	22 0f       	add	r18, r18
     d80:	33 1f       	adc	r19, r19
     d82:	82 0f       	add	r24, r18
     d84:	93 1f       	adc	r25, r19
     d86:	84 0f       	add	r24, r20
     d88:	95 1f       	adc	r25, r21
     d8a:	fc 01       	movw	r30, r24
     d8c:	eb 58       	subi	r30, 0x8B	; 139
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	80 81       	ld	r24, Z
     d92:	91 81       	ldd	r25, Z+1	; 0x01
     d94:	a2 81       	ldd	r26, Z+2	; 0x02
     d96:	b3 81       	ldd	r27, Z+3	; 0x03
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	a1 05       	cpc	r26, r1
     d9c:	b1 05       	cpc	r27, r1
     d9e:	09 f0       	breq	.+2      	; 0xda2 <RTOS_VidScheduler+0xa2>
     da0:	49 c0       	rjmp	.+146    	; 0xe34 <RTOS_VidScheduler+0x134>
			{
				SysTasks[Loc_u8Count].Fun();
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	48 2f       	mov	r20, r24
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	ca 01       	movw	r24, r20
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	9c 01       	movw	r18, r24
     db0:	22 0f       	add	r18, r18
     db2:	33 1f       	adc	r19, r19
     db4:	22 0f       	add	r18, r18
     db6:	33 1f       	adc	r19, r19
     db8:	82 0f       	add	r24, r18
     dba:	93 1f       	adc	r25, r19
     dbc:	84 0f       	add	r24, r20
     dbe:	95 1f       	adc	r25, r21
     dc0:	fc 01       	movw	r30, r24
     dc2:	e2 59       	subi	r30, 0x92	; 146
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	01 90       	ld	r0, Z+
     dc8:	f0 81       	ld	r31, Z
     dca:	e0 2d       	mov	r30, r0
     dcc:	09 95       	icall
				SysTasks[Loc_u8Count].FirstDelay=SysTasks[Loc_u8Count].Periodicity-1;
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	08 2f       	mov	r16, r24
     dd2:	10 e0       	ldi	r17, 0x00	; 0
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	48 2f       	mov	r20, r24
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	ca 01       	movw	r24, r20
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	9c 01       	movw	r18, r24
     de2:	22 0f       	add	r18, r18
     de4:	33 1f       	adc	r19, r19
     de6:	22 0f       	add	r18, r18
     de8:	33 1f       	adc	r19, r19
     dea:	82 0f       	add	r24, r18
     dec:	93 1f       	adc	r25, r19
     dee:	84 0f       	add	r24, r20
     df0:	95 1f       	adc	r25, r21
     df2:	fc 01       	movw	r30, r24
     df4:	e0 59       	subi	r30, 0x90	; 144
     df6:	ff 4f       	sbci	r31, 0xFF	; 255
     df8:	80 81       	ld	r24, Z
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	a2 81       	ldd	r26, Z+2	; 0x02
     dfe:	b3 81       	ldd	r27, Z+3	; 0x03
     e00:	ac 01       	movw	r20, r24
     e02:	bd 01       	movw	r22, r26
     e04:	41 50       	subi	r20, 0x01	; 1
     e06:	50 40       	sbci	r21, 0x00	; 0
     e08:	60 40       	sbci	r22, 0x00	; 0
     e0a:	70 40       	sbci	r23, 0x00	; 0
     e0c:	c8 01       	movw	r24, r16
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	9c 01       	movw	r18, r24
     e14:	22 0f       	add	r18, r18
     e16:	33 1f       	adc	r19, r19
     e18:	22 0f       	add	r18, r18
     e1a:	33 1f       	adc	r19, r19
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	80 0f       	add	r24, r16
     e22:	91 1f       	adc	r25, r17
     e24:	fc 01       	movw	r30, r24
     e26:	eb 58       	subi	r30, 0x8B	; 139
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	40 83       	st	Z, r20
     e2c:	51 83       	std	Z+1, r21	; 0x01
     e2e:	62 83       	std	Z+2, r22	; 0x02
     e30:	73 83       	std	Z+3, r23	; 0x03
     e32:	30 c0       	rjmp	.+96     	; 0xe94 <RTOS_VidScheduler+0x194>
			}
			else
			{
				SysTasks[Loc_u8Count].FirstDelay--;
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	48 2f       	mov	r20, r24
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	ca 01       	movw	r24, r20
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	9c 01       	movw	r18, r24
     e42:	22 0f       	add	r18, r18
     e44:	33 1f       	adc	r19, r19
     e46:	22 0f       	add	r18, r18
     e48:	33 1f       	adc	r19, r19
     e4a:	82 0f       	add	r24, r18
     e4c:	93 1f       	adc	r25, r19
     e4e:	84 0f       	add	r24, r20
     e50:	95 1f       	adc	r25, r21
     e52:	fc 01       	movw	r30, r24
     e54:	eb 58       	subi	r30, 0x8B	; 139
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	a2 81       	ldd	r26, Z+2	; 0x02
     e5e:	b3 81       	ldd	r27, Z+3	; 0x03
     e60:	7c 01       	movw	r14, r24
     e62:	8d 01       	movw	r16, r26
     e64:	08 94       	sec
     e66:	e1 08       	sbc	r14, r1
     e68:	f1 08       	sbc	r15, r1
     e6a:	01 09       	sbc	r16, r1
     e6c:	11 09       	sbc	r17, r1
     e6e:	ca 01       	movw	r24, r20
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	9c 01       	movw	r18, r24
     e76:	22 0f       	add	r18, r18
     e78:	33 1f       	adc	r19, r19
     e7a:	22 0f       	add	r18, r18
     e7c:	33 1f       	adc	r19, r19
     e7e:	82 0f       	add	r24, r18
     e80:	93 1f       	adc	r25, r19
     e82:	84 0f       	add	r24, r20
     e84:	95 1f       	adc	r25, r21
     e86:	fc 01       	movw	r30, r24
     e88:	eb 58       	subi	r30, 0x8B	; 139
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	e0 82       	st	Z, r14
     e8e:	f1 82       	std	Z+1, r15	; 0x01
     e90:	02 83       	std	Z+2, r16	; 0x02
     e92:	13 83       	std	Z+3, r17	; 0x03
void RTOS_VidScheduler(void)
{
	u8 Loc_u8Count;

	/*Loop on all tasks in RTOS system*/
	for(Loc_u8Count=0;Loc_u8Count<MAX_TASK;Loc_u8Count++)
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	8f 5f       	subi	r24, 0xFF	; 255
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	85 30       	cpi	r24, 0x05	; 5
     e9e:	08 f4       	brcc	.+2      	; 0xea2 <RTOS_VidScheduler+0x1a2>
     ea0:	3a cf       	rjmp	.-396    	; 0xd16 <RTOS_VidScheduler+0x16>
		else
		{
			/*Do Nothing*/
		}
	}
}
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	ff 90       	pop	r15
     eae:	ef 90       	pop	r14
     eb0:	08 95       	ret

00000eb2 <RTOS_VidDeleteTask>:
void RTOS_VidDeleteTask(u8 Copy_u8Priority)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	0f 92       	push	r0
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	89 83       	std	Y+1, r24	; 0x01
	SysTasks[Copy_u8Priority].Fun=NULL;
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	48 2f       	mov	r20, r24
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	ca 01       	movw	r24, r20
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	9c 01       	movw	r18, r24
     ecc:	22 0f       	add	r18, r18
     ece:	33 1f       	adc	r19, r19
     ed0:	22 0f       	add	r18, r18
     ed2:	33 1f       	adc	r19, r19
     ed4:	82 0f       	add	r24, r18
     ed6:	93 1f       	adc	r25, r19
     ed8:	84 0f       	add	r24, r20
     eda:	95 1f       	adc	r25, r21
     edc:	fc 01       	movw	r30, r24
     ede:	e2 59       	subi	r30, 0x92	; 146
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	11 82       	std	Z+1, r1	; 0x01
     ee4:	10 82       	st	Z, r1
}
     ee6:	0f 90       	pop	r0
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <RTOS_VidSuspendTask>:
void RTOS_VidSuspendTask(u8 Copy_u8Priority)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	0f 92       	push	r0
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	89 83       	std	Y+1, r24	; 0x01
	SysTasks[Copy_u8Priority].TaskState=TASK_SUSPEND;
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	48 2f       	mov	r20, r24
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	ca 01       	movw	r24, r20
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	9c 01       	movw	r18, r24
     f08:	22 0f       	add	r18, r18
     f0a:	33 1f       	adc	r19, r19
     f0c:	22 0f       	add	r18, r18
     f0e:	33 1f       	adc	r19, r19
     f10:	82 0f       	add	r24, r18
     f12:	93 1f       	adc	r25, r19
     f14:	84 0f       	add	r24, r20
     f16:	95 1f       	adc	r25, r21
     f18:	fc 01       	movw	r30, r24
     f1a:	ec 58       	subi	r30, 0x8C	; 140
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	10 82       	st	Z, r1
}
     f20:	0f 90       	pop	r0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <RTOS_VidResumeTask>:
void RTOS_VidResumeTask(u8 Copy_u8Priority)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	0f 92       	push	r0
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	89 83       	std	Y+1, r24	; 0x01
	SysTasks[Copy_u8Priority].TaskState=TASK_RESUME;
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	48 2f       	mov	r20, r24
     f38:	50 e0       	ldi	r21, 0x00	; 0
     f3a:	ca 01       	movw	r24, r20
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	9c 01       	movw	r18, r24
     f42:	22 0f       	add	r18, r18
     f44:	33 1f       	adc	r19, r19
     f46:	22 0f       	add	r18, r18
     f48:	33 1f       	adc	r19, r19
     f4a:	82 0f       	add	r24, r18
     f4c:	93 1f       	adc	r25, r19
     f4e:	84 0f       	add	r24, r20
     f50:	95 1f       	adc	r25, r21
     f52:	fc 01       	movw	r30, r24
     f54:	ec 58       	subi	r30, 0x8C	; 140
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	80 83       	st	Z, r24
}
     f5c:	0f 90       	pop	r0
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <TIMER0_VidInit>:

void (*TIMER0_CallBack)(void);

/*Timer0 Initialization*/
void TIMER0_VidInit(void)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler */
	TCCR0&=0xF8;
     f6c:	a3 e5       	ldi	r26, 0x53	; 83
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e3 e5       	ldi	r30, 0x53	; 83
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	88 7f       	andi	r24, 0xF8	; 248
     f78:	8c 93       	st	X, r24
	TCCR0|=TIMER_SET_PRESCALER;
     f7a:	a3 e5       	ldi	r26, 0x53	; 83
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e3 e5       	ldi	r30, 0x53	; 83
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	84 60       	ori	r24, 0x04	; 4
     f86:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
	/*Timer Overflow Interrupt Enable*/
	SET_BIT(TIMSK,0);

#elif TIMER0_SET_MODE == TIMER0_CTC_MODE
	CLR_BIT(TCCR0,6);
     f88:	a3 e5       	ldi	r26, 0x53	; 83
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e3 e5       	ldi	r30, 0x53	; 83
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	8f 7b       	andi	r24, 0xBF	; 191
     f94:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
     f96:	a3 e5       	ldi	r26, 0x53	; 83
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e3 e5       	ldi	r30, 0x53	; 83
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	88 60       	ori	r24, 0x08	; 8
     fa2:	8c 93       	st	X, r24
#if TIMER0_SET_CTC_INTERRUPT == TIMER0_CTC_INTERRUPT_ENABLED
	SET_BIT(TIMSK,1);
     fa4:	a9 e5       	ldi	r26, 0x59	; 89
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e9 e5       	ldi	r30, 0x59	; 89
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	82 60       	ori	r24, 0x02	; 2
     fb0:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,1);
#else
#error "TIMER0 CTC Interrupt Mode is not valid..."
#endif
#if TIMER0_SET_OC0_PIN_MODE == TIMER0_OC0_PIN_DISCONNECTED
	CLR_BIT(TCCR0,5);
     fb2:	a3 e5       	ldi	r26, 0x53	; 83
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e3 e5       	ldi	r30, 0x53	; 83
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8f 7d       	andi	r24, 0xDF	; 223
     fbe:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
     fc0:	a3 e5       	ldi	r26, 0x53	; 83
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e3 e5       	ldi	r30, 0x53	; 83
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8f 7e       	andi	r24, 0xEF	; 239
     fcc:	8c 93       	st	X, r24
#endif
#else
#error "TIMER0 Mode is not valid..."
#endif

}
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <TIMER0_VidSetPreload>:
/*Set Preload Function*/
void TIMER0_VidSetPreload(u8 Copy_u8Preload)
{
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	0f 92       	push	r0
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Preload;
     fe0:	e2 e5       	ldi	r30, 0x52	; 82
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	80 83       	st	Z, r24
}
     fe8:	0f 90       	pop	r0
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <TIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void TIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	0f 92       	push	r0
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8CTCValue;
     ffc:	ec e5       	ldi	r30, 0x5C	; 92
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	80 83       	st	Z, r24
}
    1004:	0f 90       	pop	r0
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <TIMER0_VidOVF_SetCallBack>:
void TIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	00 d0       	rcall	.+0      	; 0x1012 <TIMER0_VidOVF_SetCallBack+0x6>
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	9a 83       	std	Y+2, r25	; 0x02
    1018:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack=Copy_VidCallBack;
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	9a 81       	ldd	r25, Y+2	; 0x02
    101e:	90 93 a9 00 	sts	0x00A9, r25
    1022:	80 93 a8 00 	sts	0x00A8, r24
}
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <TIMER0_VidCTC_SetCallBack>:
void TIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <TIMER0_VidCTC_SetCallBack+0x6>
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	9a 83       	std	Y+2, r25	; 0x02
    103c:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack=Copy_VidCallBack;
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	9a 81       	ldd	r25, Y+2	; 0x02
    1042:	90 93 a9 00 	sts	0x00A9, r25
    1046:	80 93 a8 00 	sts	0x00A8, r24
}
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <__vector_11>:
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    1054:	1f 92       	push	r1
    1056:	0f 92       	push	r0
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	0f 92       	push	r0
    105c:	11 24       	eor	r1, r1
    105e:	2f 93       	push	r18
    1060:	3f 93       	push	r19
    1062:	4f 93       	push	r20
    1064:	5f 93       	push	r21
    1066:	6f 93       	push	r22
    1068:	7f 93       	push	r23
    106a:	8f 93       	push	r24
    106c:	9f 93       	push	r25
    106e:	af 93       	push	r26
    1070:	bf 93       	push	r27
    1072:	ef 93       	push	r30
    1074:	ff 93       	push	r31
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
    107e:	e0 91 a8 00 	lds	r30, 0x00A8
    1082:	f0 91 a9 00 	lds	r31, 0x00A9
    1086:	09 95       	icall
}
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti

000010ae <__vector_10>:
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    10ae:	1f 92       	push	r1
    10b0:	0f 92       	push	r0
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	0f 92       	push	r0
    10b6:	11 24       	eor	r1, r1
    10b8:	2f 93       	push	r18
    10ba:	3f 93       	push	r19
    10bc:	4f 93       	push	r20
    10be:	5f 93       	push	r21
    10c0:	6f 93       	push	r22
    10c2:	7f 93       	push	r23
    10c4:	8f 93       	push	r24
    10c6:	9f 93       	push	r25
    10c8:	af 93       	push	r26
    10ca:	bf 93       	push	r27
    10cc:	ef 93       	push	r30
    10ce:	ff 93       	push	r31
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
    10d8:	e0 91 a8 00 	lds	r30, 0x00A8
    10dc:	f0 91 a9 00 	lds	r31, 0x00A9
    10e0:	09 95       	icall
}
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	ff 91       	pop	r31
    10e8:	ef 91       	pop	r30
    10ea:	bf 91       	pop	r27
    10ec:	af 91       	pop	r26
    10ee:	9f 91       	pop	r25
    10f0:	8f 91       	pop	r24
    10f2:	7f 91       	pop	r23
    10f4:	6f 91       	pop	r22
    10f6:	5f 91       	pop	r21
    10f8:	4f 91       	pop	r20
    10fa:	3f 91       	pop	r19
    10fc:	2f 91       	pop	r18
    10fe:	0f 90       	pop	r0
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	0f 90       	pop	r0
    1104:	1f 90       	pop	r1
    1106:	18 95       	reti

00001108 <MGIE_VidEnable>:

#include"MGIE_Private.h"

/*GIE Enable Function*/
void MGIE_VidEnable(void)
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1110:	af e5       	ldi	r26, 0x5F	; 95
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	ef e5       	ldi	r30, 0x5F	; 95
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	80 68       	ori	r24, 0x80	; 128
    111c:	8c 93       	st	X, r24
}
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <MGIE_VidDisable>:
/*GIE Disable Function*/
void MGIE_VidDisable(void)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    112c:	af e5       	ldi	r26, 0x5F	; 95
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	ef e5       	ldi	r30, 0x5F	; 95
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	8f 77       	andi	r24, 0x7F	; 127
    1138:	8c 93       	st	X, r24
}
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8  Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <MDIO_Error_State_SetPinDirection+0x6>
    1146:	00 d0       	rcall	.+0      	; 0x1148 <MDIO_Error_State_SetPinDirection+0x8>
    1148:	00 d0       	rcall	.+0      	; 0x114a <MDIO_Error_State_SetPinDirection+0xa>
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	8a 83       	std	Y+2, r24	; 0x02
    1150:	6b 83       	std	Y+3, r22	; 0x03
    1152:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	88 30       	cpi	r24, 0x08	; 8
    115c:	08 f0       	brcs	.+2      	; 0x1160 <MDIO_Error_State_SetPinDirection+0x20>
    115e:	e8 c0       	rjmp	.+464    	; 0x1330 <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch(Copy_u8PortNumber)
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	3e 83       	std	Y+6, r19	; 0x06
    1168:	2d 83       	std	Y+5, r18	; 0x05
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	91 05       	cpc	r25, r1
    1172:	09 f4       	brne	.+2      	; 0x1176 <MDIO_Error_State_SetPinDirection+0x36>
    1174:	48 c0       	rjmp	.+144    	; 0x1206 <MDIO_Error_State_SetPinDirection+0xc6>
    1176:	2d 81       	ldd	r18, Y+5	; 0x05
    1178:	3e 81       	ldd	r19, Y+6	; 0x06
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	2c f4       	brge	.+10     	; 0x118a <MDIO_Error_State_SetPinDirection+0x4a>
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
    1182:	9e 81       	ldd	r25, Y+6	; 0x06
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	71 f0       	breq	.+28     	; 0x11a4 <MDIO_Error_State_SetPinDirection+0x64>
    1188:	d1 c0       	rjmp	.+418    	; 0x132c <MDIO_Error_State_SetPinDirection+0x1ec>
    118a:	2d 81       	ldd	r18, Y+5	; 0x05
    118c:	3e 81       	ldd	r19, Y+6	; 0x06
    118e:	22 30       	cpi	r18, 0x02	; 2
    1190:	31 05       	cpc	r19, r1
    1192:	09 f4       	brne	.+2      	; 0x1196 <MDIO_Error_State_SetPinDirection+0x56>
    1194:	69 c0       	rjmp	.+210    	; 0x1268 <MDIO_Error_State_SetPinDirection+0x128>
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	83 30       	cpi	r24, 0x03	; 3
    119c:	91 05       	cpc	r25, r1
    119e:	09 f4       	brne	.+2      	; 0x11a2 <MDIO_Error_State_SetPinDirection+0x62>
    11a0:	94 c0       	rjmp	.+296    	; 0x12ca <MDIO_Error_State_SetPinDirection+0x18a>
    11a2:	c4 c0       	rjmp	.+392    	; 0x132c <MDIO_Error_State_SetPinDirection+0x1ec>
		{
		case MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	a1 f4       	brne	.+40     	; 0x11d2 <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
    11aa:	aa e3       	ldi	r26, 0x3A	; 58
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	ea e3       	ldi	r30, 0x3A	; 58
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <MDIO_Error_State_SetPinDirection+0x88>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <MDIO_Error_State_SetPinDirection+0x84>
    11cc:	84 2b       	or	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	b0 c0       	rjmp	.+352    	; 0x1332 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    11d2:	8c 81       	ldd	r24, Y+4	; 0x04
    11d4:	88 23       	and	r24, r24
    11d6:	a9 f4       	brne	.+42     	; 0x1202 <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
    11d8:	aa e3       	ldi	r26, 0x3A	; 58
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	ea e3       	ldi	r30, 0x3A	; 58
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <MDIO_Error_State_SetPinDirection+0xb6>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <MDIO_Error_State_SetPinDirection+0xb2>
    11fa:	80 95       	com	r24
    11fc:	84 23       	and	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	98 c0       	rjmp	.+304    	; 0x1332 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    1202:	19 82       	std	Y+1, r1	; 0x01
    1204:	96 c0       	rjmp	.+300    	; 0x1332 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	a1 f4       	brne	.+40     	; 0x1234 <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
    120c:	a7 e3       	ldi	r26, 0x37	; 55
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e7 e3       	ldi	r30, 0x37	; 55
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <MDIO_Error_State_SetPinDirection+0xea>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <MDIO_Error_State_SetPinDirection+0xe6>
    122e:	84 2b       	or	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	7f c0       	rjmp	.+254    	; 0x1332 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	88 23       	and	r24, r24
    1238:	a9 f4       	brne	.+42     	; 0x1264 <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
    123a:	a7 e3       	ldi	r26, 0x37	; 55
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e7 e3       	ldi	r30, 0x37	; 55
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <MDIO_Error_State_SetPinDirection+0x118>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <MDIO_Error_State_SetPinDirection+0x114>
    125c:	80 95       	com	r24
    125e:	84 23       	and	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	67 c0       	rjmp	.+206    	; 0x1332 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    1264:	19 82       	std	Y+1, r1	; 0x01
    1266:	65 c0       	rjmp	.+202    	; 0x1332 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1268:	8c 81       	ldd	r24, Y+4	; 0x04
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	a1 f4       	brne	.+40     	; 0x1296 <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    126e:	a4 e3       	ldi	r26, 0x34	; 52
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e4 e3       	ldi	r30, 0x34	; 52
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <MDIO_Error_State_SetPinDirection+0x14c>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <MDIO_Error_State_SetPinDirection+0x148>
    1290:	84 2b       	or	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	4e c0       	rjmp	.+156    	; 0x1332 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	88 23       	and	r24, r24
    129a:	a9 f4       	brne	.+42     	; 0x12c6 <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    129c:	a4 e3       	ldi	r26, 0x34	; 52
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e4 e3       	ldi	r30, 0x34	; 52
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <MDIO_Error_State_SetPinDirection+0x17a>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <MDIO_Error_State_SetPinDirection+0x176>
    12be:	80 95       	com	r24
    12c0:	84 23       	and	r24, r20
    12c2:	8c 93       	st	X, r24
    12c4:	36 c0       	rjmp	.+108    	; 0x1332 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    12c6:	19 82       	std	Y+1, r1	; 0x01
    12c8:	34 c0       	rjmp	.+104    	; 0x1332 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;	
		case MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    12ca:	8c 81       	ldd	r24, Y+4	; 0x04
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	a1 f4       	brne	.+40     	; 0x12f8 <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    12d0:	a1 e3       	ldi	r26, 0x31	; 49
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e1 e3       	ldi	r30, 0x31	; 49
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <MDIO_Error_State_SetPinDirection+0x1ae>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <MDIO_Error_State_SetPinDirection+0x1aa>
    12f2:	84 2b       	or	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	1d c0       	rjmp	.+58     	; 0x1332 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    12f8:	8c 81       	ldd	r24, Y+4	; 0x04
    12fa:	88 23       	and	r24, r24
    12fc:	a9 f4       	brne	.+42     	; 0x1328 <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    12fe:	a1 e3       	ldi	r26, 0x31	; 49
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e1 e3       	ldi	r30, 0x31	; 49
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <MDIO_Error_State_SetPinDirection+0x1dc>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <MDIO_Error_State_SetPinDirection+0x1d8>
    1320:	80 95       	com	r24
    1322:	84 23       	and	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	05 c0       	rjmp	.+10     	; 0x1332 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    1328:	19 82       	std	Y+1, r1	; 0x01
    132a:	03 c0       	rjmp	.+6      	; 0x1332 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    132c:	19 82       	std	Y+1, r1	; 0x01
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <MDIO_Error_State_SetPinDirection+0x1f2>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1330:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
    1332:	89 81       	ldd	r24, Y+1	; 0x01
}
    1334:	26 96       	adiw	r28, 0x06	; 6
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <MDIO_Error_State_SetPortDirection>:
/*Set Port Direction Function */
Error_State MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	00 d0       	rcall	.+0      	; 0x134c <MDIO_Error_State_SetPortDirection+0x6>
    134c:	00 d0       	rcall	.+0      	; 0x134e <MDIO_Error_State_SetPortDirection+0x8>
    134e:	0f 92       	push	r0
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	8a 83       	std	Y+2, r24	; 0x02
    1356:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState=OK;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	8f 3f       	cpi	r24, 0xFF	; 255
    1360:	19 f0       	breq	.+6      	; 0x1368 <MDIO_Error_State_SetPortDirection+0x22>
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	88 23       	and	r24, r24
    1366:	a9 f5       	brne	.+106    	; 0x13d2 <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	3d 83       	std	Y+5, r19	; 0x05
    1370:	2c 83       	std	Y+4, r18	; 0x04
    1372:	8c 81       	ldd	r24, Y+4	; 0x04
    1374:	9d 81       	ldd	r25, Y+5	; 0x05
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	91 05       	cpc	r25, r1
    137a:	d1 f0       	breq	.+52     	; 0x13b0 <MDIO_Error_State_SetPortDirection+0x6a>
    137c:	2c 81       	ldd	r18, Y+4	; 0x04
    137e:	3d 81       	ldd	r19, Y+5	; 0x05
    1380:	22 30       	cpi	r18, 0x02	; 2
    1382:	31 05       	cpc	r19, r1
    1384:	2c f4       	brge	.+10     	; 0x1390 <MDIO_Error_State_SetPortDirection+0x4a>
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	9d 81       	ldd	r25, Y+5	; 0x05
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	61 f0       	breq	.+24     	; 0x13a6 <MDIO_Error_State_SetPortDirection+0x60>
    138e:	1f c0       	rjmp	.+62     	; 0x13ce <MDIO_Error_State_SetPortDirection+0x88>
    1390:	2c 81       	ldd	r18, Y+4	; 0x04
    1392:	3d 81       	ldd	r19, Y+5	; 0x05
    1394:	22 30       	cpi	r18, 0x02	; 2
    1396:	31 05       	cpc	r19, r1
    1398:	81 f0       	breq	.+32     	; 0x13ba <MDIO_Error_State_SetPortDirection+0x74>
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	83 30       	cpi	r24, 0x03	; 3
    13a0:	91 05       	cpc	r25, r1
    13a2:	81 f0       	breq	.+32     	; 0x13c4 <MDIO_Error_State_SetPortDirection+0x7e>
    13a4:	14 c0       	rjmp	.+40     	; 0x13ce <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA=Copy_u8PortDirection;
    13a6:	ea e3       	ldi	r30, 0x3A	; 58
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	80 83       	st	Z, r24
    13ae:	12 c0       	rjmp	.+36     	; 0x13d4 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB=Copy_u8PortDirection;
    13b0:	e7 e3       	ldi	r30, 0x37	; 55
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	80 83       	st	Z, r24
    13b8:	0d c0       	rjmp	.+26     	; 0x13d4 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC=Copy_u8PortDirection;
    13ba:	e4 e3       	ldi	r30, 0x34	; 52
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	80 83       	st	Z, r24
    13c2:	08 c0       	rjmp	.+16     	; 0x13d4 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD=Copy_u8PortDirection;
    13c4:	e1 e3       	ldi	r30, 0x31	; 49
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	80 83       	st	Z, r24
    13cc:	03 c0       	rjmp	.+6      	; 0x13d4 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    13ce:	19 82       	std	Y+1, r1	; 0x01
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    13d2:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <MDIO_Error_State_SetPinValue+0x6>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <MDIO_Error_State_SetPinValue+0x8>
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <MDIO_Error_State_SetPinValue+0xa>
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	8a 83       	std	Y+2, r24	; 0x02
    13f6:	6b 83       	std	Y+3, r22	; 0x03
    13f8:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	88 30       	cpi	r24, 0x08	; 8
    1402:	08 f0       	brcs	.+2      	; 0x1406 <MDIO_Error_State_SetPinValue+0x20>
    1404:	e8 c0       	rjmp	.+464    	; 0x15d6 <MDIO_Error_State_SetPinValue+0x1f0>
	{
		switch(Copy_u8PortNumber)
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	3e 83       	std	Y+6, r19	; 0x06
    140e:	2d 83       	std	Y+5, r18	; 0x05
    1410:	8d 81       	ldd	r24, Y+5	; 0x05
    1412:	9e 81       	ldd	r25, Y+6	; 0x06
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	91 05       	cpc	r25, r1
    1418:	09 f4       	brne	.+2      	; 0x141c <MDIO_Error_State_SetPinValue+0x36>
    141a:	48 c0       	rjmp	.+144    	; 0x14ac <MDIO_Error_State_SetPinValue+0xc6>
    141c:	2d 81       	ldd	r18, Y+5	; 0x05
    141e:	3e 81       	ldd	r19, Y+6	; 0x06
    1420:	22 30       	cpi	r18, 0x02	; 2
    1422:	31 05       	cpc	r19, r1
    1424:	2c f4       	brge	.+10     	; 0x1430 <MDIO_Error_State_SetPinValue+0x4a>
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	71 f0       	breq	.+28     	; 0x144a <MDIO_Error_State_SetPinValue+0x64>
    142e:	d1 c0       	rjmp	.+418    	; 0x15d2 <MDIO_Error_State_SetPinValue+0x1ec>
    1430:	2d 81       	ldd	r18, Y+5	; 0x05
    1432:	3e 81       	ldd	r19, Y+6	; 0x06
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	09 f4       	brne	.+2      	; 0x143c <MDIO_Error_State_SetPinValue+0x56>
    143a:	69 c0       	rjmp	.+210    	; 0x150e <MDIO_Error_State_SetPinValue+0x128>
    143c:	8d 81       	ldd	r24, Y+5	; 0x05
    143e:	9e 81       	ldd	r25, Y+6	; 0x06
    1440:	83 30       	cpi	r24, 0x03	; 3
    1442:	91 05       	cpc	r25, r1
    1444:	09 f4       	brne	.+2      	; 0x1448 <MDIO_Error_State_SetPinValue+0x62>
    1446:	94 c0       	rjmp	.+296    	; 0x1570 <MDIO_Error_State_SetPinValue+0x18a>
    1448:	c4 c0       	rjmp	.+392    	; 0x15d2 <MDIO_Error_State_SetPinValue+0x1ec>
		{
		case MDIO_PORTA:
			if(Copy_u8PinValue==PIN_HIGH)
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	a1 f4       	brne	.+40     	; 0x1478 <MDIO_Error_State_SetPinValue+0x92>
			{
				SET_BIT(PORTA,Copy_u8PinNumber);
    1450:	ab e3       	ldi	r26, 0x3B	; 59
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	eb e3       	ldi	r30, 0x3B	; 59
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <MDIO_Error_State_SetPinValue+0x88>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <MDIO_Error_State_SetPinValue+0x84>
    1472:	84 2b       	or	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	b0 c0       	rjmp	.+352    	; 0x15d8 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	88 23       	and	r24, r24
    147c:	a9 f4       	brne	.+42     	; 0x14a8 <MDIO_Error_State_SetPinValue+0xc2>
			{
				CLR_BIT(PORTA,Copy_u8PinNumber);
    147e:	ab e3       	ldi	r26, 0x3B	; 59
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	eb e3       	ldi	r30, 0x3B	; 59
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <MDIO_Error_State_SetPinValue+0xb6>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <MDIO_Error_State_SetPinValue+0xb2>
    14a0:	80 95       	com	r24
    14a2:	84 23       	and	r24, r20
    14a4:	8c 93       	st	X, r24
    14a6:	98 c0       	rjmp	.+304    	; 0x15d8 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    14a8:	19 82       	std	Y+1, r1	; 0x01
    14aa:	96 c0       	rjmp	.+300    	; 0x15d8 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinValue==PIN_HIGH)
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	a1 f4       	brne	.+40     	; 0x14da <MDIO_Error_State_SetPinValue+0xf4>
			{
				SET_BIT(PORTB,Copy_u8PinNumber);
    14b2:	a8 e3       	ldi	r26, 0x38	; 56
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e8 e3       	ldi	r30, 0x38	; 56
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <MDIO_Error_State_SetPinValue+0xea>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <MDIO_Error_State_SetPinValue+0xe6>
    14d4:	84 2b       	or	r24, r20
    14d6:	8c 93       	st	X, r24
    14d8:	7f c0       	rjmp	.+254    	; 0x15d8 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
    14dc:	88 23       	and	r24, r24
    14de:	a9 f4       	brne	.+42     	; 0x150a <MDIO_Error_State_SetPinValue+0x124>
			{
				CLR_BIT(PORTB,Copy_u8PinNumber);
    14e0:	a8 e3       	ldi	r26, 0x38	; 56
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e8 e3       	ldi	r30, 0x38	; 56
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	48 2f       	mov	r20, r24
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	02 2e       	mov	r0, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <MDIO_Error_State_SetPinValue+0x118>
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	0a 94       	dec	r0
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <MDIO_Error_State_SetPinValue+0x114>
    1502:	80 95       	com	r24
    1504:	84 23       	and	r24, r20
    1506:	8c 93       	st	X, r24
    1508:	67 c0       	rjmp	.+206    	; 0x15d8 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    150a:	19 82       	std	Y+1, r1	; 0x01
    150c:	65 c0       	rjmp	.+202    	; 0x15d8 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinValue==PIN_HIGH)
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	a1 f4       	brne	.+40     	; 0x153c <MDIO_Error_State_SetPinValue+0x156>
			{
				SET_BIT(PORTC,Copy_u8PinNumber);
    1514:	a5 e3       	ldi	r26, 0x35	; 53
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e5 e3       	ldi	r30, 0x35	; 53
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 2e       	mov	r0, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <MDIO_Error_State_SetPinValue+0x14c>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	0a 94       	dec	r0
    1534:	e2 f7       	brpl	.-8      	; 0x152e <MDIO_Error_State_SetPinValue+0x148>
    1536:	84 2b       	or	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	4e c0       	rjmp	.+156    	; 0x15d8 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    153c:	8c 81       	ldd	r24, Y+4	; 0x04
    153e:	88 23       	and	r24, r24
    1540:	a9 f4       	brne	.+42     	; 0x156c <MDIO_Error_State_SetPinValue+0x186>
			{
				CLR_BIT(PORTC,Copy_u8PinNumber);
    1542:	a5 e3       	ldi	r26, 0x35	; 53
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e5 e3       	ldi	r30, 0x35	; 53
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <MDIO_Error_State_SetPinValue+0x17a>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <MDIO_Error_State_SetPinValue+0x176>
    1564:	80 95       	com	r24
    1566:	84 23       	and	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	36 c0       	rjmp	.+108    	; 0x15d8 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    156c:	19 82       	std	Y+1, r1	; 0x01
    156e:	34 c0       	rjmp	.+104    	; 0x15d8 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;	
		case MDIO_PORTD:
			if(Copy_u8PinValue==PIN_HIGH)
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	a1 f4       	brne	.+40     	; 0x159e <MDIO_Error_State_SetPinValue+0x1b8>
			{
				SET_BIT(PORTD,Copy_u8PinNumber);
    1576:	a2 e3       	ldi	r26, 0x32	; 50
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e2 e3       	ldi	r30, 0x32	; 50
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	48 2f       	mov	r20, r24
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	02 2e       	mov	r0, r18
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <MDIO_Error_State_SetPinValue+0x1ae>
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	0a 94       	dec	r0
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <MDIO_Error_State_SetPinValue+0x1aa>
    1598:	84 2b       	or	r24, r20
    159a:	8c 93       	st	X, r24
    159c:	1d c0       	rjmp	.+58     	; 0x15d8 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    159e:	8c 81       	ldd	r24, Y+4	; 0x04
    15a0:	88 23       	and	r24, r24
    15a2:	a9 f4       	brne	.+42     	; 0x15ce <MDIO_Error_State_SetPinValue+0x1e8>
			{
				CLR_BIT(PORTD,Copy_u8PinNumber);
    15a4:	a2 e3       	ldi	r26, 0x32	; 50
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e2 e3       	ldi	r30, 0x32	; 50
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	48 2f       	mov	r20, r24
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	02 2e       	mov	r0, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <MDIO_Error_State_SetPinValue+0x1dc>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	0a 94       	dec	r0
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <MDIO_Error_State_SetPinValue+0x1d8>
    15c6:	80 95       	com	r24
    15c8:	84 23       	and	r24, r20
    15ca:	8c 93       	st	X, r24
    15cc:	05 c0       	rjmp	.+10     	; 0x15d8 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    15ce:	19 82       	std	Y+1, r1	; 0x01
    15d0:	03 c0       	rjmp	.+6      	; 0x15d8 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    15d2:	19 82       	std	Y+1, r1	; 0x01
    15d4:	01 c0       	rjmp	.+2      	; 0x15d8 <MDIO_Error_State_SetPinValue+0x1f2>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    15d6:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15da:	26 96       	adiw	r28, 0x06	; 6
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <MDIO_Error_State_SetPortValue>:

/*Set Port Value Function */
Error_State MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <MDIO_Error_State_SetPortValue+0x6>
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <MDIO_Error_State_SetPortValue+0x8>
    15f4:	0f 92       	push	r0
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	8a 83       	std	Y+2, r24	; 0x02
    15fc:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState=OK;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortNumber)
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	3d 83       	std	Y+5, r19	; 0x05
    160a:	2c 83       	std	Y+4, r18	; 0x04
    160c:	8c 81       	ldd	r24, Y+4	; 0x04
    160e:	9d 81       	ldd	r25, Y+5	; 0x05
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	91 05       	cpc	r25, r1
    1614:	d1 f0       	breq	.+52     	; 0x164a <MDIO_Error_State_SetPortValue+0x5e>
    1616:	2c 81       	ldd	r18, Y+4	; 0x04
    1618:	3d 81       	ldd	r19, Y+5	; 0x05
    161a:	22 30       	cpi	r18, 0x02	; 2
    161c:	31 05       	cpc	r19, r1
    161e:	2c f4       	brge	.+10     	; 0x162a <MDIO_Error_State_SetPortValue+0x3e>
    1620:	8c 81       	ldd	r24, Y+4	; 0x04
    1622:	9d 81       	ldd	r25, Y+5	; 0x05
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	61 f0       	breq	.+24     	; 0x1640 <MDIO_Error_State_SetPortValue+0x54>
    1628:	1f c0       	rjmp	.+62     	; 0x1668 <MDIO_Error_State_SetPortValue+0x7c>
    162a:	2c 81       	ldd	r18, Y+4	; 0x04
    162c:	3d 81       	ldd	r19, Y+5	; 0x05
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	81 f0       	breq	.+32     	; 0x1654 <MDIO_Error_State_SetPortValue+0x68>
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	9d 81       	ldd	r25, Y+5	; 0x05
    1638:	83 30       	cpi	r24, 0x03	; 3
    163a:	91 05       	cpc	r25, r1
    163c:	81 f0       	breq	.+32     	; 0x165e <MDIO_Error_State_SetPortValue+0x72>
    163e:	14 c0       	rjmp	.+40     	; 0x1668 <MDIO_Error_State_SetPortValue+0x7c>
	{
	case MDIO_PORTA:
		PORTA=Copy_u8PortValue;
    1640:	eb e3       	ldi	r30, 0x3B	; 59
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	80 83       	st	Z, r24
    1648:	10 c0       	rjmp	.+32     	; 0x166a <MDIO_Error_State_SetPortValue+0x7e>
		break;
	case MDIO_PORTB:
		PORTB=Copy_u8PortValue;
    164a:	e8 e3       	ldi	r30, 0x38	; 56
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	80 83       	st	Z, r24
    1652:	0b c0       	rjmp	.+22     	; 0x166a <MDIO_Error_State_SetPortValue+0x7e>
		break;
	case MDIO_PORTC:
		PORTC=Copy_u8PortValue;
    1654:	e5 e3       	ldi	r30, 0x35	; 53
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	80 83       	st	Z, r24
    165c:	06 c0       	rjmp	.+12     	; 0x166a <MDIO_Error_State_SetPortValue+0x7e>
		break;	
	case MDIO_PORTD:
		PORTD=Copy_u8PortValue;
    165e:	e2 e3       	ldi	r30, 0x32	; 50
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	80 83       	st	Z, r24
    1666:	01 c0       	rjmp	.+2      	; 0x166a <MDIO_Error_State_SetPortValue+0x7e>
		break;	
	default:
		LOC_Error_State_ReturnState=NOK;
    1668:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return LOC_Error_State_ReturnState;
    166a:	89 81       	ldd	r24, Y+1	; 0x01
}
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <MDIO_Error_State_GetPinValue>:

/*Get Pin Value Function */
Error_State MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	27 97       	sbiw	r28, 0x07	; 7
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	8a 83       	std	Y+2, r24	; 0x02
    1692:	6b 83       	std	Y+3, r22	; 0x03
    1694:	5d 83       	std	Y+5, r21	; 0x05
    1696:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue!=NULL_POINTER))
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	88 30       	cpi	r24, 0x08	; 8
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <MDIO_Error_State_GetPinValue+0x28>
    16a2:	79 c0       	rjmp	.+242    	; 0x1796 <MDIO_Error_State_GetPinValue+0x11a>
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	9d 81       	ldd	r25, Y+5	; 0x05
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	91 05       	cpc	r25, r1
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <MDIO_Error_State_GetPinValue+0x34>
    16ae:	73 c0       	rjmp	.+230    	; 0x1796 <MDIO_Error_State_GetPinValue+0x11a>
	{
		switch(Copy_u8PortNumber)
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	3f 83       	std	Y+7, r19	; 0x07
    16b8:	2e 83       	std	Y+6, r18	; 0x06
    16ba:	4e 81       	ldd	r20, Y+6	; 0x06
    16bc:	5f 81       	ldd	r21, Y+7	; 0x07
    16be:	41 30       	cpi	r20, 0x01	; 1
    16c0:	51 05       	cpc	r21, r1
    16c2:	59 f1       	breq	.+86     	; 0x171a <MDIO_Error_State_GetPinValue+0x9e>
    16c4:	8e 81       	ldd	r24, Y+6	; 0x06
    16c6:	9f 81       	ldd	r25, Y+7	; 0x07
    16c8:	82 30       	cpi	r24, 0x02	; 2
    16ca:	91 05       	cpc	r25, r1
    16cc:	34 f4       	brge	.+12     	; 0x16da <MDIO_Error_State_GetPinValue+0x5e>
    16ce:	2e 81       	ldd	r18, Y+6	; 0x06
    16d0:	3f 81       	ldd	r19, Y+7	; 0x07
    16d2:	21 15       	cp	r18, r1
    16d4:	31 05       	cpc	r19, r1
    16d6:	69 f0       	breq	.+26     	; 0x16f2 <MDIO_Error_State_GetPinValue+0x76>
    16d8:	5c c0       	rjmp	.+184    	; 0x1792 <MDIO_Error_State_GetPinValue+0x116>
    16da:	4e 81       	ldd	r20, Y+6	; 0x06
    16dc:	5f 81       	ldd	r21, Y+7	; 0x07
    16de:	42 30       	cpi	r20, 0x02	; 2
    16e0:	51 05       	cpc	r21, r1
    16e2:	79 f1       	breq	.+94     	; 0x1742 <MDIO_Error_State_GetPinValue+0xc6>
    16e4:	8e 81       	ldd	r24, Y+6	; 0x06
    16e6:	9f 81       	ldd	r25, Y+7	; 0x07
    16e8:	83 30       	cpi	r24, 0x03	; 3
    16ea:	91 05       	cpc	r25, r1
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <MDIO_Error_State_GetPinValue+0x74>
    16ee:	3d c0       	rjmp	.+122    	; 0x176a <MDIO_Error_State_GetPinValue+0xee>
    16f0:	50 c0       	rjmp	.+160    	; 0x1792 <MDIO_Error_State_GetPinValue+0x116>
		{
		case MDIO_PORTA:
			*P_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
    16f2:	e9 e3       	ldi	r30, 0x39	; 57
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	88 2f       	mov	r24, r24
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a9 01       	movw	r20, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <MDIO_Error_State_GetPinValue+0x8e>
    1706:	55 95       	asr	r21
    1708:	47 95       	ror	r20
    170a:	8a 95       	dec	r24
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <MDIO_Error_State_GetPinValue+0x8a>
    170e:	ca 01       	movw	r24, r20
    1710:	81 70       	andi	r24, 0x01	; 1
    1712:	ec 81       	ldd	r30, Y+4	; 0x04
    1714:	fd 81       	ldd	r31, Y+5	; 0x05
    1716:	80 83       	st	Z, r24
    1718:	3f c0       	rjmp	.+126    	; 0x1798 <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTB:
			*P_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
    171a:	e6 e3       	ldi	r30, 0x36	; 54
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	88 2f       	mov	r24, r24
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a9 01       	movw	r20, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <MDIO_Error_State_GetPinValue+0xb6>
    172e:	55 95       	asr	r21
    1730:	47 95       	ror	r20
    1732:	8a 95       	dec	r24
    1734:	e2 f7       	brpl	.-8      	; 0x172e <MDIO_Error_State_GetPinValue+0xb2>
    1736:	ca 01       	movw	r24, r20
    1738:	81 70       	andi	r24, 0x01	; 1
    173a:	ec 81       	ldd	r30, Y+4	; 0x04
    173c:	fd 81       	ldd	r31, Y+5	; 0x05
    173e:	80 83       	st	Z, r24
    1740:	2b c0       	rjmp	.+86     	; 0x1798 <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTC:
			*P_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
    1742:	e3 e3       	ldi	r30, 0x33	; 51
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	a9 01       	movw	r20, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <MDIO_Error_State_GetPinValue+0xde>
    1756:	55 95       	asr	r21
    1758:	47 95       	ror	r20
    175a:	8a 95       	dec	r24
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <MDIO_Error_State_GetPinValue+0xda>
    175e:	ca 01       	movw	r24, r20
    1760:	81 70       	andi	r24, 0x01	; 1
    1762:	ec 81       	ldd	r30, Y+4	; 0x04
    1764:	fd 81       	ldd	r31, Y+5	; 0x05
    1766:	80 83       	st	Z, r24
    1768:	17 c0       	rjmp	.+46     	; 0x1798 <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTD:
			*P_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
    176a:	e0 e3       	ldi	r30, 0x30	; 48
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	88 2f       	mov	r24, r24
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	a9 01       	movw	r20, r18
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <MDIO_Error_State_GetPinValue+0x106>
    177e:	55 95       	asr	r21
    1780:	47 95       	ror	r20
    1782:	8a 95       	dec	r24
    1784:	e2 f7       	brpl	.-8      	; 0x177e <MDIO_Error_State_GetPinValue+0x102>
    1786:	ca 01       	movw	r24, r20
    1788:	81 70       	andi	r24, 0x01	; 1
    178a:	ec 81       	ldd	r30, Y+4	; 0x04
    178c:	fd 81       	ldd	r31, Y+5	; 0x05
    178e:	80 83       	st	Z, r24
    1790:	03 c0       	rjmp	.+6      	; 0x1798 <MDIO_Error_State_GetPinValue+0x11c>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1792:	19 82       	std	Y+1, r1	; 0x01
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <MDIO_Error_State_GetPinValue+0x11c>
			break;		
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1796:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
    1798:	89 81       	ldd	r24, Y+1	; 0x01
}
    179a:	27 96       	adiw	r28, 0x07	; 7
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	de bf       	out	0x3e, r29	; 62
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	cd bf       	out	0x3d, r28	; 61
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <MDIO_Error_State_SetNippleValue>:
/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <MDIO_Error_State_SetNippleValue+0x6>
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <MDIO_Error_State_SetNippleValue+0x8>
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <MDIO_Error_State_SetNippleValue+0xa>
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	8a 83       	std	Y+2, r24	; 0x02
    17bc:	6b 83       	std	Y+3, r22	; 0x03
    17be:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	85 30       	cpi	r24, 0x05	; 5
    17c8:	08 f0       	brcs	.+2      	; 0x17cc <MDIO_Error_State_SetNippleValue+0x20>
    17ca:	97 c0       	rjmp	.+302    	; 0x18fa <MDIO_Error_State_SetNippleValue+0x14e>
	{
		switch(Copy_u8PortNumber)
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	3e 83       	std	Y+6, r19	; 0x06
    17d4:	2d 83       	std	Y+5, r18	; 0x05
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	91 05       	cpc	r25, r1
    17de:	a1 f1       	breq	.+104    	; 0x1848 <MDIO_Error_State_SetNippleValue+0x9c>
    17e0:	2d 81       	ldd	r18, Y+5	; 0x05
    17e2:	3e 81       	ldd	r19, Y+6	; 0x06
    17e4:	22 30       	cpi	r18, 0x02	; 2
    17e6:	31 05       	cpc	r19, r1
    17e8:	2c f4       	brge	.+10     	; 0x17f4 <MDIO_Error_State_SetNippleValue+0x48>
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
    17ec:	9e 81       	ldd	r25, Y+6	; 0x06
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	71 f0       	breq	.+28     	; 0x180e <MDIO_Error_State_SetNippleValue+0x62>
    17f2:	81 c0       	rjmp	.+258    	; 0x18f6 <MDIO_Error_State_SetNippleValue+0x14a>
    17f4:	2d 81       	ldd	r18, Y+5	; 0x05
    17f6:	3e 81       	ldd	r19, Y+6	; 0x06
    17f8:	22 30       	cpi	r18, 0x02	; 2
    17fa:	31 05       	cpc	r19, r1
    17fc:	09 f4       	brne	.+2      	; 0x1800 <MDIO_Error_State_SetNippleValue+0x54>
    17fe:	41 c0       	rjmp	.+130    	; 0x1882 <MDIO_Error_State_SetNippleValue+0xd6>
    1800:	8d 81       	ldd	r24, Y+5	; 0x05
    1802:	9e 81       	ldd	r25, Y+6	; 0x06
    1804:	83 30       	cpi	r24, 0x03	; 3
    1806:	91 05       	cpc	r25, r1
    1808:	09 f4       	brne	.+2      	; 0x180c <MDIO_Error_State_SetNippleValue+0x60>
    180a:	58 c0       	rjmp	.+176    	; 0x18bc <MDIO_Error_State_SetNippleValue+0x110>
    180c:	74 c0       	rjmp	.+232    	; 0x18f6 <MDIO_Error_State_SetNippleValue+0x14a>
		case MDIO_PORTA:
		/*for(u8 i=Copy_u8PinStart;i<=7;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    180e:	ab e3       	ldi	r26, 0x3B	; 59
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	eb e3       	ldi	r30, 0x3B	; 59
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	8f e0       	ldi	r24, 0x0F	; 15
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <MDIO_Error_State_SetNippleValue+0x80>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <MDIO_Error_State_SetNippleValue+0x7c>
    1830:	80 95       	com	r24
    1832:	84 23       	and	r24, r20
    1834:	8c 93       	st	X, r24
			PORTA|=Copy_u8Value;
    1836:	ab e3       	ldi	r26, 0x3B	; 59
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	eb e3       	ldi	r30, 0x3B	; 59
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	90 81       	ld	r25, Z
    1840:	8c 81       	ldd	r24, Y+4	; 0x04
    1842:	89 2b       	or	r24, r25
    1844:	8c 93       	st	X, r24
    1846:	5a c0       	rjmp	.+180    	; 0x18fc <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTB:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    1848:	a8 e3       	ldi	r26, 0x38	; 56
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e8 e3       	ldi	r30, 0x38	; 56
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	48 2f       	mov	r20, r24
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	8f e0       	ldi	r24, 0x0F	; 15
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 2e       	mov	r0, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <MDIO_Error_State_SetNippleValue+0xba>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	0a 94       	dec	r0
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <MDIO_Error_State_SetNippleValue+0xb6>
    186a:	80 95       	com	r24
    186c:	84 23       	and	r24, r20
    186e:	8c 93       	st	X, r24
			PORTB|=Copy_u8Value;
    1870:	a8 e3       	ldi	r26, 0x38	; 56
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e8 e3       	ldi	r30, 0x38	; 56
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	90 81       	ld	r25, Z
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	89 2b       	or	r24, r25
    187e:	8c 93       	st	X, r24
    1880:	3d c0       	rjmp	.+122    	; 0x18fc <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTC:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    1882:	a5 e3       	ldi	r26, 0x35	; 53
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e5 e3       	ldi	r30, 0x35	; 53
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	48 2f       	mov	r20, r24
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	8f e0       	ldi	r24, 0x0F	; 15
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 2e       	mov	r0, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <MDIO_Error_State_SetNippleValue+0xf4>
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	0a 94       	dec	r0
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <MDIO_Error_State_SetNippleValue+0xf0>
    18a4:	80 95       	com	r24
    18a6:	84 23       	and	r24, r20
    18a8:	8c 93       	st	X, r24
			PORTC|=Copy_u8Value;
    18aa:	a5 e3       	ldi	r26, 0x35	; 53
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e5 e3       	ldi	r30, 0x35	; 53
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	90 81       	ld	r25, Z
    18b4:	8c 81       	ldd	r24, Y+4	; 0x04
    18b6:	89 2b       	or	r24, r25
    18b8:	8c 93       	st	X, r24
    18ba:	20 c0       	rjmp	.+64     	; 0x18fc <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTD:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTD&=(~(0x0F<<Copy_u8PinStart));
    18bc:	a2 e3       	ldi	r26, 0x32	; 50
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e2 e3       	ldi	r30, 0x32	; 50
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	48 2f       	mov	r20, r24
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	8f e0       	ldi	r24, 0x0F	; 15
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	02 2e       	mov	r0, r18
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <MDIO_Error_State_SetNippleValue+0x12e>
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	0a 94       	dec	r0
    18dc:	e2 f7       	brpl	.-8      	; 0x18d6 <MDIO_Error_State_SetNippleValue+0x12a>
    18de:	80 95       	com	r24
    18e0:	84 23       	and	r24, r20
    18e2:	8c 93       	st	X, r24
			PORTD|=Copy_u8Value;
    18e4:	a2 e3       	ldi	r26, 0x32	; 50
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	e2 e3       	ldi	r30, 0x32	; 50
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	90 81       	ld	r25, Z
    18ee:	8c 81       	ldd	r24, Y+4	; 0x04
    18f0:	89 2b       	or	r24, r25
    18f2:	8c 93       	st	X, r24
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <MDIO_Error_State_SetNippleValue+0x150>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    18f6:	19 82       	std	Y+1, r1	; 0x01
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <MDIO_Error_State_SetNippleValue+0x150>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    18fa:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18fe:	26 96       	adiw	r28, 0x06	; 6
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	cd bf       	out	0x3d, r28	; 61
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <HLED_VidInit>:
#include"..\..\LIB\LSTD_TYPES.h"
#include"..\..\MCAL\MDIO\MDIO_Interface.h"
#include"HLED_Interface.h"

void HLED_VidInit(LED_t *Copy_Led)
{
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	00 d0       	rcall	.+0      	; 0x1916 <HLED_VidInit+0x6>
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	9a 83       	std	Y+2, r25	; 0x02
    191c:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    191e:	e9 81       	ldd	r30, Y+1	; 0x01
    1920:	fa 81       	ldd	r31, Y+2	; 0x02
    1922:	81 81       	ldd	r24, Z+1	; 0x01
    1924:	e9 81       	ldd	r30, Y+1	; 0x01
    1926:	fa 81       	ldd	r31, Y+2	; 0x02
    1928:	90 81       	ld	r25, Z
    192a:	69 2f       	mov	r22, r25
    192c:	41 e0       	ldi	r20, 0x01	; 1
    192e:	0e 94 a0 08 	call	0x1140	; 0x1140 <MDIO_Error_State_SetPinDirection>
}
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <HLED_VidLed_On>:
void HLED_VidLed_On(LED_t *Copy_Led)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <HLED_VidLed_On+0x6>
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	9a 83       	std	Y+2, r25	; 0x02
    1948:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    194a:	e9 81       	ldd	r30, Y+1	; 0x01
    194c:	fa 81       	ldd	r31, Y+2	; 0x02
    194e:	81 81       	ldd	r24, Z+1	; 0x01
    1950:	e9 81       	ldd	r30, Y+1	; 0x01
    1952:	fa 81       	ldd	r31, Y+2	; 0x02
    1954:	90 81       	ld	r25, Z
    1956:	69 2f       	mov	r22, r25
    1958:	41 e0       	ldi	r20, 0x01	; 1
    195a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <MDIO_Error_State_SetPinValue>
}
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <HLED_VidLed_Off>:
void HLED_VidLed_Off(LED_t *Copy_Led)
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	00 d0       	rcall	.+0      	; 0x196e <HLED_VidLed_Off+0x6>
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	9a 83       	std	Y+2, r25	; 0x02
    1974:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    1976:	e9 81       	ldd	r30, Y+1	; 0x01
    1978:	fa 81       	ldd	r31, Y+2	; 0x02
    197a:	81 81       	ldd	r24, Z+1	; 0x01
    197c:	e9 81       	ldd	r30, Y+1	; 0x01
    197e:	fa 81       	ldd	r31, Y+2	; 0x02
    1980:	90 81       	ld	r25, Z
    1982:	69 2f       	mov	r22, r25
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <MDIO_Error_State_SetPinValue>
}
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	00 d0       	rcall	.+0      	; 0x199a <HLED_VidLed_Toggle+0x6>
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	9a 83       	std	Y+2, r25	; 0x02
    19a0:	89 83       	std	Y+1, r24	; 0x01
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    19a2:	80 91 a5 00 	lds	r24, 0x00A5
    19a6:	88 23       	and	r24, r24
    19a8:	71 f4       	brne	.+28     	; 0x19c6 <HLED_VidLed_Toggle+0x32>
	{
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    19aa:	e9 81       	ldd	r30, Y+1	; 0x01
    19ac:	fa 81       	ldd	r31, Y+2	; 0x02
    19ae:	81 81       	ldd	r24, Z+1	; 0x01
    19b0:	e9 81       	ldd	r30, Y+1	; 0x01
    19b2:	fa 81       	ldd	r31, Y+2	; 0x02
    19b4:	90 81       	ld	r25, Z
    19b6:	69 2f       	mov	r22, r25
    19b8:	41 e0       	ldi	r20, 0x01	; 1
    19ba:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <MDIO_Error_State_SetPinValue>
	Flag=1;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	80 93 a5 00 	sts	0x00A5, r24
    19c4:	10 c0       	rjmp	.+32     	; 0x19e6 <HLED_VidLed_Toggle+0x52>
	}
	else if(Flag==1)
    19c6:	80 91 a5 00 	lds	r24, 0x00A5
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	61 f4       	brne	.+24     	; 0x19e6 <HLED_VidLed_Toggle+0x52>
	{
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    19ce:	e9 81       	ldd	r30, Y+1	; 0x01
    19d0:	fa 81       	ldd	r31, Y+2	; 0x02
    19d2:	81 81       	ldd	r24, Z+1	; 0x01
    19d4:	e9 81       	ldd	r30, Y+1	; 0x01
    19d6:	fa 81       	ldd	r31, Y+2	; 0x02
    19d8:	90 81       	ld	r25, Z
    19da:	69 2f       	mov	r22, r25
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <MDIO_Error_State_SetPinValue>
	Flag=0;
    19e2:	10 92 a5 00 	sts	0x00A5, r1
	}

}
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <SevenSegmentUpdate>:
#include "Seven_G.h"
#include "std_macros.h"

 void SevenSegmentUpdate (unsigned int counter){
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	a0 97       	sbiw	r28, 0x20	; 32
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	98 a3       	std	Y+32, r25	; 0x20
    1a06:	8f 8f       	std	Y+31, r24	; 0x1f
	unsigned int x = 0 ;
    1a08:	1e 8e       	std	Y+30, r1	; 0x1e
    1a0a:	1d 8e       	std	Y+29, r1	; 0x1d

	x = counter % 10 ;
    1a0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a0e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a10:	2a e0       	ldi	r18, 0x0A	; 10
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	b9 01       	movw	r22, r18
    1a16:	0e 94 24 10 	call	0x2048	; 0x2048 <__udivmodhi4>
    1a1a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a1c:	8d 8f       	std	Y+29, r24	; 0x1d
	SEG_EN2(1);
    1a1e:	a2 e3       	ldi	r26, 0x32	; 50
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e2 e3       	ldi	r30, 0x32	; 50
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	80 62       	ori	r24, 0x20	; 32
    1a2a:	8c 93       	st	X, r24
	SEG_EN1(0);
    1a2c:	a2 e3       	ldi	r26, 0x32	; 50
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e2 e3       	ldi	r30, 0x32	; 50
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	8f 7e       	andi	r24, 0xEF	; 239
    1a38:	8c 93       	st	X, r24
	SEG_A(READBIT(x,0));
    1a3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a3e:	81 70       	andi	r24, 0x01	; 1
    1a40:	90 70       	andi	r25, 0x00	; 0
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	41 f4       	brne	.+16     	; 0x1a56 <SevenSegmentUpdate+0x66>
    1a46:	a2 e3       	ldi	r26, 0x32	; 50
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e2 e3       	ldi	r30, 0x32	; 50
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	8e 7f       	andi	r24, 0xFE	; 254
    1a52:	8c 93       	st	X, r24
    1a54:	07 c0       	rjmp	.+14     	; 0x1a64 <SevenSegmentUpdate+0x74>
    1a56:	a2 e3       	ldi	r26, 0x32	; 50
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e2 e3       	ldi	r30, 0x32	; 50
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	81 60       	ori	r24, 0x01	; 1
    1a62:	8c 93       	st	X, r24
	SEG_B(READBIT(x,1));
    1a64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a68:	82 70       	andi	r24, 0x02	; 2
    1a6a:	90 70       	andi	r25, 0x00	; 0
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	41 f4       	brne	.+16     	; 0x1a80 <SevenSegmentUpdate+0x90>
    1a70:	a2 e3       	ldi	r26, 0x32	; 50
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e2 e3       	ldi	r30, 0x32	; 50
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	8d 7f       	andi	r24, 0xFD	; 253
    1a7c:	8c 93       	st	X, r24
    1a7e:	07 c0       	rjmp	.+14     	; 0x1a8e <SevenSegmentUpdate+0x9e>
    1a80:	a2 e3       	ldi	r26, 0x32	; 50
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e2 e3       	ldi	r30, 0x32	; 50
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	82 60       	ori	r24, 0x02	; 2
    1a8c:	8c 93       	st	X, r24
	SEG_C(READBIT(x,2));
    1a8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a92:	84 70       	andi	r24, 0x04	; 4
    1a94:	90 70       	andi	r25, 0x00	; 0
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	41 f4       	brne	.+16     	; 0x1aaa <SevenSegmentUpdate+0xba>
    1a9a:	a2 e3       	ldi	r26, 0x32	; 50
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e2 e3       	ldi	r30, 0x32	; 50
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	8b 7f       	andi	r24, 0xFB	; 251
    1aa6:	8c 93       	st	X, r24
    1aa8:	07 c0       	rjmp	.+14     	; 0x1ab8 <SevenSegmentUpdate+0xc8>
    1aaa:	a2 e3       	ldi	r26, 0x32	; 50
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e2 e3       	ldi	r30, 0x32	; 50
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	84 60       	ori	r24, 0x04	; 4
    1ab6:	8c 93       	st	X, r24
	SEG_D(READBIT(x,3));
    1ab8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1abc:	88 70       	andi	r24, 0x08	; 8
    1abe:	90 70       	andi	r25, 0x00	; 0
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	41 f4       	brne	.+16     	; 0x1ad4 <SevenSegmentUpdate+0xe4>
    1ac4:	a2 e3       	ldi	r26, 0x32	; 50
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e2 e3       	ldi	r30, 0x32	; 50
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	87 7f       	andi	r24, 0xF7	; 247
    1ad0:	8c 93       	st	X, r24
    1ad2:	07 c0       	rjmp	.+14     	; 0x1ae2 <SevenSegmentUpdate+0xf2>
    1ad4:	a2 e3       	ldi	r26, 0x32	; 50
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e2 e3       	ldi	r30, 0x32	; 50
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	88 60       	ori	r24, 0x08	; 8
    1ae0:	8c 93       	st	X, r24
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a0 e8       	ldi	r26, 0x80	; 128
    1ae8:	bf e3       	ldi	r27, 0x3F	; 63
    1aea:	89 8f       	std	Y+25, r24	; 0x19
    1aec:	9a 8f       	std	Y+26, r25	; 0x1a
    1aee:	ab 8f       	std	Y+27, r26	; 0x1b
    1af0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af2:	69 8d       	ldd	r22, Y+25	; 0x19
    1af4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	4a ef       	ldi	r20, 0xFA	; 250
    1b00:	54 e4       	ldi	r21, 0x44	; 68
    1b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	8d 8b       	std	Y+21, r24	; 0x15
    1b0c:	9e 8b       	std	Y+22, r25	; 0x16
    1b0e:	af 8b       	std	Y+23, r26	; 0x17
    1b10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b12:	6d 89       	ldd	r22, Y+21	; 0x15
    1b14:	7e 89       	ldd	r23, Y+22	; 0x16
    1b16:	8f 89       	ldd	r24, Y+23	; 0x17
    1b18:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e8       	ldi	r20, 0x80	; 128
    1b20:	5f e3       	ldi	r21, 0x3F	; 63
    1b22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b26:	88 23       	and	r24, r24
    1b28:	2c f4       	brge	.+10     	; 0x1b34 <SevenSegmentUpdate+0x144>
		__ticks = 1;
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9c 8b       	std	Y+20, r25	; 0x14
    1b30:	8b 8b       	std	Y+19, r24	; 0x13
    1b32:	3f c0       	rjmp	.+126    	; 0x1bb2 <SevenSegmentUpdate+0x1c2>
	else if (__tmp > 65535)
    1b34:	6d 89       	ldd	r22, Y+21	; 0x15
    1b36:	7e 89       	ldd	r23, Y+22	; 0x16
    1b38:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	3f ef       	ldi	r19, 0xFF	; 255
    1b40:	4f e7       	ldi	r20, 0x7F	; 127
    1b42:	57 e4       	ldi	r21, 0x47	; 71
    1b44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b48:	18 16       	cp	r1, r24
    1b4a:	4c f5       	brge	.+82     	; 0x1b9e <SevenSegmentUpdate+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e2       	ldi	r20, 0x20	; 32
    1b5a:	51 e4       	ldi	r21, 0x41	; 65
    1b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	bc 01       	movw	r22, r24
    1b66:	cd 01       	movw	r24, r26
    1b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	9c 8b       	std	Y+20, r25	; 0x14
    1b72:	8b 8b       	std	Y+19, r24	; 0x13
    1b74:	0f c0       	rjmp	.+30     	; 0x1b94 <SevenSegmentUpdate+0x1a4>
    1b76:	88 ec       	ldi	r24, 0xC8	; 200
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	9a 8b       	std	Y+18, r25	; 0x12
    1b7c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b7e:	89 89       	ldd	r24, Y+17	; 0x11
    1b80:	9a 89       	ldd	r25, Y+18	; 0x12
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <SevenSegmentUpdate+0x192>
    1b86:	9a 8b       	std	Y+18, r25	; 0x12
    1b88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	9c 8b       	std	Y+20, r25	; 0x14
    1b92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b94:	8b 89       	ldd	r24, Y+19	; 0x13
    1b96:	9c 89       	ldd	r25, Y+20	; 0x14
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	69 f7       	brne	.-38     	; 0x1b76 <SevenSegmentUpdate+0x186>
    1b9c:	14 c0       	rjmp	.+40     	; 0x1bc6 <SevenSegmentUpdate+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9c 8b       	std	Y+20, r25	; 0x14
    1bb0:	8b 8b       	std	Y+19, r24	; 0x13
    1bb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb6:	98 8b       	std	Y+16, r25	; 0x10
    1bb8:	8f 87       	std	Y+15, r24	; 0x0f
    1bba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bbc:	98 89       	ldd	r25, Y+16	; 0x10
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <SevenSegmentUpdate+0x1ce>
    1bc2:	98 8b       	std	Y+16, r25	; 0x10
    1bc4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	x = counter / 10 ;
    1bc6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bc8:	98 a1       	ldd	r25, Y+32	; 0x20
    1bca:	2a e0       	ldi	r18, 0x0A	; 10
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	b9 01       	movw	r22, r18
    1bd0:	0e 94 24 10 	call	0x2048	; 0x2048 <__udivmodhi4>
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	9e 8f       	std	Y+30, r25	; 0x1e
    1bd8:	8d 8f       	std	Y+29, r24	; 0x1d
	SEG_EN2(0);
    1bda:	a2 e3       	ldi	r26, 0x32	; 50
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e2 e3       	ldi	r30, 0x32	; 50
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	8f 7d       	andi	r24, 0xDF	; 223
    1be6:	8c 93       	st	X, r24
	SEG_EN1(1);
    1be8:	a2 e3       	ldi	r26, 0x32	; 50
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e2 e3       	ldi	r30, 0x32	; 50
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	80 61       	ori	r24, 0x10	; 16
    1bf4:	8c 93       	st	X, r24
	SEG_A(READBIT(x,0));
    1bf6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bf8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bfa:	81 70       	andi	r24, 0x01	; 1
    1bfc:	90 70       	andi	r25, 0x00	; 0
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	41 f4       	brne	.+16     	; 0x1c12 <SevenSegmentUpdate+0x222>
    1c02:	a2 e3       	ldi	r26, 0x32	; 50
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e2 e3       	ldi	r30, 0x32	; 50
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	8e 7f       	andi	r24, 0xFE	; 254
    1c0e:	8c 93       	st	X, r24
    1c10:	07 c0       	rjmp	.+14     	; 0x1c20 <SevenSegmentUpdate+0x230>
    1c12:	a2 e3       	ldi	r26, 0x32	; 50
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e2 e3       	ldi	r30, 0x32	; 50
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	81 60       	ori	r24, 0x01	; 1
    1c1e:	8c 93       	st	X, r24
	SEG_B(READBIT(x,1));
    1c20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c24:	82 70       	andi	r24, 0x02	; 2
    1c26:	90 70       	andi	r25, 0x00	; 0
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	41 f4       	brne	.+16     	; 0x1c3c <SevenSegmentUpdate+0x24c>
    1c2c:	a2 e3       	ldi	r26, 0x32	; 50
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e2 e3       	ldi	r30, 0x32	; 50
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	8d 7f       	andi	r24, 0xFD	; 253
    1c38:	8c 93       	st	X, r24
    1c3a:	07 c0       	rjmp	.+14     	; 0x1c4a <SevenSegmentUpdate+0x25a>
    1c3c:	a2 e3       	ldi	r26, 0x32	; 50
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e2 e3       	ldi	r30, 0x32	; 50
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	82 60       	ori	r24, 0x02	; 2
    1c48:	8c 93       	st	X, r24
	SEG_C(READBIT(x,2));
    1c4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c4e:	84 70       	andi	r24, 0x04	; 4
    1c50:	90 70       	andi	r25, 0x00	; 0
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	41 f4       	brne	.+16     	; 0x1c66 <SevenSegmentUpdate+0x276>
    1c56:	a2 e3       	ldi	r26, 0x32	; 50
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e2 e3       	ldi	r30, 0x32	; 50
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	8b 7f       	andi	r24, 0xFB	; 251
    1c62:	8c 93       	st	X, r24
    1c64:	07 c0       	rjmp	.+14     	; 0x1c74 <SevenSegmentUpdate+0x284>
    1c66:	a2 e3       	ldi	r26, 0x32	; 50
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e2 e3       	ldi	r30, 0x32	; 50
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	84 60       	ori	r24, 0x04	; 4
    1c72:	8c 93       	st	X, r24
	SEG_D(READBIT(x,3));
    1c74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c78:	88 70       	andi	r24, 0x08	; 8
    1c7a:	90 70       	andi	r25, 0x00	; 0
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	41 f4       	brne	.+16     	; 0x1c90 <SevenSegmentUpdate+0x2a0>
    1c80:	a2 e3       	ldi	r26, 0x32	; 50
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e2 e3       	ldi	r30, 0x32	; 50
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	87 7f       	andi	r24, 0xF7	; 247
    1c8c:	8c 93       	st	X, r24
    1c8e:	07 c0       	rjmp	.+14     	; 0x1c9e <SevenSegmentUpdate+0x2ae>
    1c90:	a2 e3       	ldi	r26, 0x32	; 50
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	e2 e3       	ldi	r30, 0x32	; 50
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	88 60       	ori	r24, 0x08	; 8
    1c9c:	8c 93       	st	X, r24
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a0 e8       	ldi	r26, 0x80	; 128
    1ca4:	bf e3       	ldi	r27, 0x3F	; 63
    1ca6:	8b 87       	std	Y+11, r24	; 0x0b
    1ca8:	9c 87       	std	Y+12, r25	; 0x0c
    1caa:	ad 87       	std	Y+13, r26	; 0x0d
    1cac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4a ef       	ldi	r20, 0xFA	; 250
    1cbc:	54 e4       	ldi	r21, 0x44	; 68
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	8f 83       	std	Y+7, r24	; 0x07
    1cc8:	98 87       	std	Y+8, r25	; 0x08
    1cca:	a9 87       	std	Y+9, r26	; 0x09
    1ccc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cce:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd0:	78 85       	ldd	r23, Y+8	; 0x08
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e8       	ldi	r20, 0x80	; 128
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce2:	88 23       	and	r24, r24
    1ce4:	2c f4       	brge	.+10     	; 0x1cf0 <SevenSegmentUpdate+0x300>
		__ticks = 1;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9e 83       	std	Y+6, r25	; 0x06
    1cec:	8d 83       	std	Y+5, r24	; 0x05
    1cee:	3f c0       	rjmp	.+126    	; 0x1d6e <SevenSegmentUpdate+0x37e>
	else if (__tmp > 65535)
    1cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf2:	78 85       	ldd	r23, Y+8	; 0x08
    1cf4:	89 85       	ldd	r24, Y+9	; 0x09
    1cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	3f ef       	ldi	r19, 0xFF	; 255
    1cfc:	4f e7       	ldi	r20, 0x7F	; 127
    1cfe:	57 e4       	ldi	r21, 0x47	; 71
    1d00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d04:	18 16       	cp	r1, r24
    1d06:	4c f5       	brge	.+82     	; 0x1d5a <SevenSegmentUpdate+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e2       	ldi	r20, 0x20	; 32
    1d16:	51 e4       	ldi	r21, 0x41	; 65
    1d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	bc 01       	movw	r22, r24
    1d22:	cd 01       	movw	r24, r26
    1d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	9e 83       	std	Y+6, r25	; 0x06
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
    1d30:	0f c0       	rjmp	.+30     	; 0x1d50 <SevenSegmentUpdate+0x360>
    1d32:	88 ec       	ldi	r24, 0xC8	; 200
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	9c 83       	std	Y+4, r25	; 0x04
    1d38:	8b 83       	std	Y+3, r24	; 0x03
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <SevenSegmentUpdate+0x34e>
    1d42:	9c 83       	std	Y+4, r25	; 0x04
    1d44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	9e 83       	std	Y+6, r25	; 0x06
    1d4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d50:	8d 81       	ldd	r24, Y+5	; 0x05
    1d52:	9e 81       	ldd	r25, Y+6	; 0x06
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	69 f7       	brne	.-38     	; 0x1d32 <SevenSegmentUpdate+0x342>
    1d58:	14 c0       	rjmp	.+40     	; 0x1d82 <SevenSegmentUpdate+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5c:	78 85       	ldd	r23, Y+8	; 0x08
    1d5e:	89 85       	ldd	r24, Y+9	; 0x09
    1d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	9e 83       	std	Y+6, r25	; 0x06
    1d6c:	8d 83       	std	Y+5, r24	; 0x05
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	9a 83       	std	Y+2, r25	; 0x02
    1d74:	89 83       	std	Y+1, r24	; 0x01
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <SevenSegmentUpdate+0x38a>
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
 }
    1d82:	a0 96       	adiw	r28, 0x20	; 32
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <SevenSegmentInit>:
 void SevenSegmentInit (){
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
	SevenSegmentDir = 0xFF;
    1d9c:	e1 e3       	ldi	r30, 0x31	; 49
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	8f ef       	ldi	r24, 0xFF	; 255
    1da2:	80 83       	st	Z, r24
	SEG_EN2(1);
    1da4:	a2 e3       	ldi	r26, 0x32	; 50
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e2 e3       	ldi	r30, 0x32	; 50
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	80 62       	ori	r24, 0x20	; 32
    1db0:	8c 93       	st	X, r24
	SEG_EN1(1);
    1db2:	a2 e3       	ldi	r26, 0x32	; 50
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e2 e3       	ldi	r30, 0x32	; 50
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	80 61       	ori	r24, 0x10	; 16
    1dbe:	8c 93       	st	X, r24
	PORTD = 0xff;
    1dc0:	e2 e3       	ldi	r30, 0x32	; 50
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	8f ef       	ldi	r24, 0xFF	; 255
    1dc6:	80 83       	st	Z, r24
}
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <RUN_DC_MOTOR_FORWARD>:
LED_t Led3={MDIO_PORTC,PIN2};




void RUN_DC_MOTOR_FORWARD(void){
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
	// enable the motor driver bin
	PORTB |= (1<<5);
    1dd6:	a8 e3       	ldi	r26, 0x38	; 56
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e8 e3       	ldi	r30, 0x38	; 56
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	80 62       	ori	r24, 0x20	; 32
    1de2:	8c 93       	st	X, r24
	PORTB |= (1<<3);
    1de4:	a8 e3       	ldi	r26, 0x38	; 56
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e8 e3       	ldi	r30, 0x38	; 56
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	88 60       	ori	r24, 0x08	; 8
    1df0:	8c 93       	st	X, r24
	PORTB &= ~(1<<4);
    1df2:	a8 e3       	ldi	r26, 0x38	; 56
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e8 e3       	ldi	r30, 0x38	; 56
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	8f 7e       	andi	r24, 0xEF	; 239
    1dfe:	8c 93       	st	X, r24



}
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <RUN_DC_MOTOR_BACKWARD>:


void RUN_DC_MOTOR_BACKWARD(void){
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
	// enable the motor driver bin
	PORTB |= (1<<5);
    1e0e:	a8 e3       	ldi	r26, 0x38	; 56
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e8 e3       	ldi	r30, 0x38	; 56
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	80 62       	ori	r24, 0x20	; 32
    1e1a:	8c 93       	st	X, r24
	PORTB |= (1<<4);
    1e1c:	a8 e3       	ldi	r26, 0x38	; 56
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e8 e3       	ldi	r30, 0x38	; 56
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	80 61       	ori	r24, 0x10	; 16
    1e28:	8c 93       	st	X, r24
	PORTB &= ~(1<<3);
    1e2a:	a8 e3       	ldi	r26, 0x38	; 56
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e8 e3       	ldi	r30, 0x38	; 56
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	87 7f       	andi	r24, 0xF7	; 247
    1e36:	8c 93       	st	X, r24
}
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <MOTOR_OFF>:


void MOTOR_OFF(void){
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62

	PORTB &= ~(1<<5);
    1e46:	a8 e3       	ldi	r26, 0x38	; 56
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e8 e3       	ldi	r30, 0x38	; 56
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	8f 7d       	andi	r24, 0xDF	; 223
    1e52:	8c 93       	st	X, r24
	PORTB &= ~(1<<3);
    1e54:	a8 e3       	ldi	r26, 0x38	; 56
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e8 e3       	ldi	r30, 0x38	; 56
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	87 7f       	andi	r24, 0xF7	; 247
    1e60:	8c 93       	st	X, r24
	PORTB &= ~(1<<4);
    1e62:	a8 e3       	ldi	r26, 0x38	; 56
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e8 e3       	ldi	r30, 0x38	; 56
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	8f 7e       	andi	r24, 0xEF	; 239
    1e6e:	8c 93       	st	X, r24


}
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <Traffic_Lights>:




 void Traffic_Lights(void){
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62

	 if ( Main_Counter >= 0 &&  Main_Counter < 60  ){
    1e7e:	80 91 a6 00 	lds	r24, 0x00A6
    1e82:	8c 33       	cpi	r24, 0x3C	; 60
    1e84:	68 f4       	brcc	.+26     	; 0x1ea0 <Traffic_Lights+0x2a>
	 	HLED_VidLed_On(&Led1);
    1e86:	88 e6       	ldi	r24, 0x68	; 104
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	0e 94 9e 0c 	call	0x193c	; 0x193c <HLED_VidLed_On>
	 	HLED_VidLed_Off(&Led2);
    1e8e:	8a e6       	ldi	r24, 0x6A	; 106
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 94 b4 0c 	call	0x1968	; 0x1968 <HLED_VidLed_Off>
	 	HLED_VidLed_Off(&Led3);
    1e96:	8c e6       	ldi	r24, 0x6C	; 108
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <HLED_VidLed_Off>
    1e9e:	29 c0       	rjmp	.+82     	; 0x1ef2 <Traffic_Lights+0x7c>
	    }
	else if ( Main_Counter >= 60 &&  Main_Counter < 70 ){
    1ea0:	80 91 a6 00 	lds	r24, 0x00A6
    1ea4:	8c 33       	cpi	r24, 0x3C	; 60
    1ea6:	88 f0       	brcs	.+34     	; 0x1eca <Traffic_Lights+0x54>
    1ea8:	80 91 a6 00 	lds	r24, 0x00A6
    1eac:	86 34       	cpi	r24, 0x46	; 70
    1eae:	68 f4       	brcc	.+26     	; 0x1eca <Traffic_Lights+0x54>

		HLED_VidLed_On(&Led2);
    1eb0:	8a e6       	ldi	r24, 0x6A	; 106
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	0e 94 9e 0c 	call	0x193c	; 0x193c <HLED_VidLed_On>
		HLED_VidLed_Off(&Led1);
    1eb8:	88 e6       	ldi	r24, 0x68	; 104
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	0e 94 b4 0c 	call	0x1968	; 0x1968 <HLED_VidLed_Off>
		HLED_VidLed_Off(&Led3);
    1ec0:	8c e6       	ldi	r24, 0x6C	; 108
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <HLED_VidLed_Off>
    1ec8:	14 c0       	rjmp	.+40     	; 0x1ef2 <Traffic_Lights+0x7c>
	}

	else if ( Main_Counter >= 70 &&  Main_Counter < 130 ){
    1eca:	80 91 a6 00 	lds	r24, 0x00A6
    1ece:	86 34       	cpi	r24, 0x46	; 70
    1ed0:	80 f0       	brcs	.+32     	; 0x1ef2 <Traffic_Lights+0x7c>
    1ed2:	80 91 a6 00 	lds	r24, 0x00A6
    1ed6:	82 38       	cpi	r24, 0x82	; 130
    1ed8:	60 f4       	brcc	.+24     	; 0x1ef2 <Traffic_Lights+0x7c>

		HLED_VidLed_On(&Led3);
    1eda:	8c e6       	ldi	r24, 0x6C	; 108
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 9e 0c 	call	0x193c	; 0x193c <HLED_VidLed_On>
		HLED_VidLed_Off(&Led1);
    1ee2:	88 e6       	ldi	r24, 0x68	; 104
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <HLED_VidLed_Off>
		HLED_VidLed_Off(&Led2);
    1eea:	8a e6       	ldi	r24, 0x6A	; 106
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 b4 0c 	call	0x1968	; 0x1968 <HLED_VidLed_Off>
	else {


	}

 }
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <Motor_Operation>:


  void Motor_Operation (void){
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62

	   if (Main_Counter >= 0  && Main_Counter < 5 ){
    1f00:	80 91 a6 00 	lds	r24, 0x00A6
    1f04:	85 30       	cpi	r24, 0x05	; 5
    1f06:	18 f4       	brcc	.+6      	; 0x1f0e <Motor_Operation+0x16>


		   RUN_DC_MOTOR_FORWARD ();
    1f08:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <RUN_DC_MOTOR_FORWARD>
    1f0c:	0d c0       	rjmp	.+26     	; 0x1f28 <Motor_Operation+0x30>

	   }
	   else if (Main_Counter >= 70  && Main_Counter < 75){
    1f0e:	80 91 a6 00 	lds	r24, 0x00A6
    1f12:	86 34       	cpi	r24, 0x46	; 70
    1f14:	38 f0       	brcs	.+14     	; 0x1f24 <Motor_Operation+0x2c>
    1f16:	80 91 a6 00 	lds	r24, 0x00A6
    1f1a:	8b 34       	cpi	r24, 0x4B	; 75
    1f1c:	18 f4       	brcc	.+6      	; 0x1f24 <Motor_Operation+0x2c>

		   RUN_DC_MOTOR_BACKWARD();
    1f1e:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <RUN_DC_MOTOR_BACKWARD>
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <Motor_Operation+0x30>
	   }


	   else {

		   MOTOR_OFF();
    1f24:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MOTOR_OFF>
	   }


  }
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <SSG_COUNTER>:


  void SSG_COUNTER(){
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
     Time_Frame++;
    1f36:	80 91 a7 00 	lds	r24, 0x00A7
    1f3a:	8f 5f       	subi	r24, 0xFF	; 255
    1f3c:	80 93 a7 00 	sts	0x00A7, r24

     if (Time_Frame == 40)
    1f40:	80 91 a7 00 	lds	r24, 0x00A7
    1f44:	88 32       	cpi	r24, 0x28	; 40
    1f46:	c9 f5       	brne	.+114    	; 0x1fba <SSG_COUNTER+0x8c>
     {
    	 Main_Counter++;
    1f48:	80 91 a6 00 	lds	r24, 0x00A6
    1f4c:	8f 5f       	subi	r24, 0xFF	; 255
    1f4e:	80 93 a6 00 	sts	0x00A6, r24


    	  if ( Main_Counter >= 0 &&  Main_Counter < 60 )
    1f52:	80 91 a6 00 	lds	r24, 0x00A6
    1f56:	8c 33       	cpi	r24, 0x3C	; 60
    1f58:	38 f4       	brcc	.+14     	; 0x1f68 <SSG_COUNTER+0x3a>
    	       {

    		  SevenSegmentUpdate (Main_Counter);
    1f5a:	80 91 a6 00 	lds	r24, 0x00A6
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <SevenSegmentUpdate>
    1f66:	27 c0       	rjmp	.+78     	; 0x1fb6 <SSG_COUNTER+0x88>
    	   }

    	  else if ( Main_Counter >= 60 &&  Main_Counter < 70 ) {
    1f68:	80 91 a6 00 	lds	r24, 0x00A6
    1f6c:	8c 33       	cpi	r24, 0x3C	; 60
    1f6e:	60 f0       	brcs	.+24     	; 0x1f88 <SSG_COUNTER+0x5a>
    1f70:	80 91 a6 00 	lds	r24, 0x00A6
    1f74:	86 34       	cpi	r24, 0x46	; 70
    1f76:	40 f4       	brcc	.+16     	; 0x1f88 <SSG_COUNTER+0x5a>

    		  SevenSegmentUpdate (Main_Counter - 60);
    1f78:	80 91 a6 00 	lds	r24, 0x00A6
    1f7c:	88 2f       	mov	r24, r24
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	cc 97       	sbiw	r24, 0x3c	; 60
    1f82:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <SevenSegmentUpdate>
    1f86:	17 c0       	rjmp	.+46     	; 0x1fb6 <SSG_COUNTER+0x88>
    	  }

    	 else if ( Main_Counter >= 70 &&  Main_Counter < 130 ) {
    1f88:	80 91 a6 00 	lds	r24, 0x00A6
    1f8c:	86 34       	cpi	r24, 0x46	; 70
    1f8e:	68 f0       	brcs	.+26     	; 0x1faa <SSG_COUNTER+0x7c>
    1f90:	80 91 a6 00 	lds	r24, 0x00A6
    1f94:	82 38       	cpi	r24, 0x82	; 130
    1f96:	48 f4       	brcc	.+18     	; 0x1faa <SSG_COUNTER+0x7c>

    	     		  SevenSegmentUpdate (Main_Counter - 70);
    1f98:	80 91 a6 00 	lds	r24, 0x00A6
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	86 54       	subi	r24, 0x46	; 70
    1fa2:	90 40       	sbci	r25, 0x00	; 0
    1fa4:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <SevenSegmentUpdate>
    1fa8:	06 c0       	rjmp	.+12     	; 0x1fb6 <SSG_COUNTER+0x88>
    	   }
    	 else if (Main_Counter == 130)
    1faa:	80 91 a6 00 	lds	r24, 0x00A6
    1fae:	82 38       	cpi	r24, 0x82	; 130
    1fb0:	11 f4       	brne	.+4      	; 0x1fb6 <SSG_COUNTER+0x88>
    	 {
    		 Main_Counter = 0;
    1fb2:	10 92 a6 00 	sts	0x00A6, r1
    	 else {


    	 }

    	Time_Frame = 0;
    1fb6:	10 92 a7 00 	sts	0x00A7, r1
     }


  }
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <main>:




int main(void)
{
    1fc0:	ef 92       	push	r14
    1fc2:	ff 92       	push	r15
    1fc4:	0f 93       	push	r16
    1fc6:	1f 93       	push	r17
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
	HLED_VidInit(&Led1);
    1fd0:	88 e6       	ldi	r24, 0x68	; 104
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	0e 94 88 0c 	call	0x1910	; 0x1910 <HLED_VidInit>
	HLED_VidInit(&Led2);
    1fd8:	8a e6       	ldi	r24, 0x6A	; 106
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	0e 94 88 0c 	call	0x1910	; 0x1910 <HLED_VidInit>
	HLED_VidInit(&Led3);
    1fe0:	8c e6       	ldi	r24, 0x6C	; 108
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	0e 94 88 0c 	call	0x1910	; 0x1910 <HLED_VidInit>
	SevenSegmentInit ();
    1fe8:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <SevenSegmentInit>

	MDIO_Error_State_SetPortDirection(MDIO_PORTB,PORT_OUTPUT);
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	6f ef       	ldi	r22, 0xFF	; 255
    1ff0:	0e 94 a3 09 	call	0x1346	; 0x1346 <MDIO_Error_State_SetPortDirection>


	RTOS_VidCreateTask(SSG_COUNTER , 1 , 0 , 0 );
    1ff4:	87 e9       	ldi	r24, 0x97	; 151
    1ff6:	9f e0       	ldi	r25, 0x0F	; 15
    1ff8:	41 e0       	ldi	r20, 0x01	; 1
    1ffa:	50 e0       	ldi	r21, 0x00	; 0
    1ffc:	60 e0       	ldi	r22, 0x00	; 0
    1ffe:	70 e0       	ldi	r23, 0x00	; 0
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	ee 24       	eor	r14, r14
    2004:	ff 24       	eor	r15, r15
    2006:	87 01       	movw	r16, r14
    2008:	0e 94 e5 05 	call	0xbca	; 0xbca <RTOS_VidCreateTask>
	RTOS_VidCreateTask(Traffic_Lights , 10 , 1 , 1 );
    200c:	8b e3       	ldi	r24, 0x3B	; 59
    200e:	9f e0       	ldi	r25, 0x0F	; 15
    2010:	4a e0       	ldi	r20, 0x0A	; 10
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	60 e0       	ldi	r22, 0x00	; 0
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	21 e0       	ldi	r18, 0x01	; 1
    201a:	ee 24       	eor	r14, r14
    201c:	ff 24       	eor	r15, r15
    201e:	87 01       	movw	r16, r14
    2020:	e3 94       	inc	r14
    2022:	0e 94 e5 05 	call	0xbca	; 0xbca <RTOS_VidCreateTask>
	RTOS_VidCreateTask(Motor_Operation, 10 , 2 , 2 );
    2026:	8c e7       	ldi	r24, 0x7C	; 124
    2028:	9f e0       	ldi	r25, 0x0F	; 15
    202a:	4a e0       	ldi	r20, 0x0A	; 10
    202c:	50 e0       	ldi	r21, 0x00	; 0
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	70 e0       	ldi	r23, 0x00	; 0
    2032:	22 e0       	ldi	r18, 0x02	; 2
    2034:	ee 24       	eor	r14, r14
    2036:	ff 24       	eor	r15, r15
    2038:	87 01       	movw	r16, r14
    203a:	68 94       	set
    203c:	e1 f8       	bld	r14, 1
    203e:	0e 94 e5 05 	call	0xbca	; 0xbca <RTOS_VidCreateTask>

	RTOS_VidInit();
    2042:	0e 94 a3 05 	call	0xb46	; 0xb46 <RTOS_VidInit>
    2046:	ff cf       	rjmp	.-2      	; 0x2046 <main+0x86>

00002048 <__udivmodhi4>:
    2048:	aa 1b       	sub	r26, r26
    204a:	bb 1b       	sub	r27, r27
    204c:	51 e1       	ldi	r21, 0x11	; 17
    204e:	07 c0       	rjmp	.+14     	; 0x205e <__udivmodhi4_ep>

00002050 <__udivmodhi4_loop>:
    2050:	aa 1f       	adc	r26, r26
    2052:	bb 1f       	adc	r27, r27
    2054:	a6 17       	cp	r26, r22
    2056:	b7 07       	cpc	r27, r23
    2058:	10 f0       	brcs	.+4      	; 0x205e <__udivmodhi4_ep>
    205a:	a6 1b       	sub	r26, r22
    205c:	b7 0b       	sbc	r27, r23

0000205e <__udivmodhi4_ep>:
    205e:	88 1f       	adc	r24, r24
    2060:	99 1f       	adc	r25, r25
    2062:	5a 95       	dec	r21
    2064:	a9 f7       	brne	.-22     	; 0x2050 <__udivmodhi4_loop>
    2066:	80 95       	com	r24
    2068:	90 95       	com	r25
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	08 95       	ret

00002070 <__udivmodsi4>:
    2070:	a1 e2       	ldi	r26, 0x21	; 33
    2072:	1a 2e       	mov	r1, r26
    2074:	aa 1b       	sub	r26, r26
    2076:	bb 1b       	sub	r27, r27
    2078:	fd 01       	movw	r30, r26
    207a:	0d c0       	rjmp	.+26     	; 0x2096 <__udivmodsi4_ep>

0000207c <__udivmodsi4_loop>:
    207c:	aa 1f       	adc	r26, r26
    207e:	bb 1f       	adc	r27, r27
    2080:	ee 1f       	adc	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	a2 17       	cp	r26, r18
    2086:	b3 07       	cpc	r27, r19
    2088:	e4 07       	cpc	r30, r20
    208a:	f5 07       	cpc	r31, r21
    208c:	20 f0       	brcs	.+8      	; 0x2096 <__udivmodsi4_ep>
    208e:	a2 1b       	sub	r26, r18
    2090:	b3 0b       	sbc	r27, r19
    2092:	e4 0b       	sbc	r30, r20
    2094:	f5 0b       	sbc	r31, r21

00002096 <__udivmodsi4_ep>:
    2096:	66 1f       	adc	r22, r22
    2098:	77 1f       	adc	r23, r23
    209a:	88 1f       	adc	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	1a 94       	dec	r1
    20a0:	69 f7       	brne	.-38     	; 0x207c <__udivmodsi4_loop>
    20a2:	60 95       	com	r22
    20a4:	70 95       	com	r23
    20a6:	80 95       	com	r24
    20a8:	90 95       	com	r25
    20aa:	9b 01       	movw	r18, r22
    20ac:	ac 01       	movw	r20, r24
    20ae:	bd 01       	movw	r22, r26
    20b0:	cf 01       	movw	r24, r30
    20b2:	08 95       	ret

000020b4 <__prologue_saves__>:
    20b4:	2f 92       	push	r2
    20b6:	3f 92       	push	r3
    20b8:	4f 92       	push	r4
    20ba:	5f 92       	push	r5
    20bc:	6f 92       	push	r6
    20be:	7f 92       	push	r7
    20c0:	8f 92       	push	r8
    20c2:	9f 92       	push	r9
    20c4:	af 92       	push	r10
    20c6:	bf 92       	push	r11
    20c8:	cf 92       	push	r12
    20ca:	df 92       	push	r13
    20cc:	ef 92       	push	r14
    20ce:	ff 92       	push	r15
    20d0:	0f 93       	push	r16
    20d2:	1f 93       	push	r17
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	ca 1b       	sub	r28, r26
    20de:	db 0b       	sbc	r29, r27
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	09 94       	ijmp

000020ec <__epilogue_restores__>:
    20ec:	2a 88       	ldd	r2, Y+18	; 0x12
    20ee:	39 88       	ldd	r3, Y+17	; 0x11
    20f0:	48 88       	ldd	r4, Y+16	; 0x10
    20f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    20f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    20f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    20f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    20fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    20fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    20fe:	b9 84       	ldd	r11, Y+9	; 0x09
    2100:	c8 84       	ldd	r12, Y+8	; 0x08
    2102:	df 80       	ldd	r13, Y+7	; 0x07
    2104:	ee 80       	ldd	r14, Y+6	; 0x06
    2106:	fd 80       	ldd	r15, Y+5	; 0x05
    2108:	0c 81       	ldd	r16, Y+4	; 0x04
    210a:	1b 81       	ldd	r17, Y+3	; 0x03
    210c:	aa 81       	ldd	r26, Y+2	; 0x02
    210e:	b9 81       	ldd	r27, Y+1	; 0x01
    2110:	ce 0f       	add	r28, r30
    2112:	d1 1d       	adc	r29, r1
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	ed 01       	movw	r28, r26
    2120:	08 95       	ret

00002122 <_exit>:
    2122:	f8 94       	cli

00002124 <__stop_program>:
    2124:	ff cf       	rjmp	.-2      	; 0x2124 <__stop_program>
